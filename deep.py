import sys
import os
import json
import time
import platform
import re
import asyncio
import aiohttp
import requests
import psutil
from typing import List, Dict
from cryptography.fernet import Fernet
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,
    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,
    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,
    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox, QShortcut, QPlainTextEdit
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QTimer, QObject, QSize,QPropertyAnimation
from PyQt5.QtGui import QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat, QKeySequence, QTextDocument,QLinearGradient,QBrush

# Scintilla lexer import
try:
    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,
                           QsciLexerHTML, QsciLexerXML, QsciLexerJSON, QsciLexerBash, QsciLexerSQL)
    HAS_SCINTILLA = True
except ImportError:
    HAS_SCINTILLA = False

# Alapbe√°ll√≠t√°sok
APP_NAME = "SzitaAIPro"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_URL = "https://openrouter.ai/api/v1/models"
MAX_HISTORY = 15
MAX_FILE_SIZE = 30000
TOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]
DEFAULT_TEMP = 0.4
DEFAULT_TOKENS_INDEX = 3

def optimize_system():
    """Rendszerr≈ëssz√©k optimaliz√°l√°sa"""
    try:
        proc = psutil.Process(os.getpid())
        if platform.system() == "Windows":
            proc.nice(psutil.HIGH_PRIORITY_CLASS)
        else:
            proc.nice(-18)

        num_threads = str(os.cpu_count() or 4)
        os.environ["OMP_NUM_THREADS"] = num_threads
        os.environ["OPENBLAS_NUM_THREADS"] = num_threads
        os.environ["MKL_NUM_THREADS"] = num_threads
    except Exception:
        pass

optimize_system()

class SettingsManager:
    """Be√°ll√≠t√°sok kezel√©se"""
    def __init__(self):
        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser("~")), APP_NAME)
        os.makedirs(self.config_dir, exist_ok=True)
        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)

    def get(self, key: str, default=None):
        return self.settings.value(key, default)

    def set(self, key, value):
        self.settings.setValue(key, value)

    @property
    def history_dir(self):
        path = os.path.join(self.config_dir, 'history')
        os.makedirs(path, exist_ok=True)
        return path

settings = SettingsManager()

class EncryptionManager:
    """Titkos√≠t√°s kezel√©se"""
    def __init__(self):
        key = settings.get('encryption_key')
        if not key:
            key = Fernet.generate_key().decode()
            settings.set('encryption_key', key)
        self.cipher = Fernet(key.encode())

    def encrypt(self, data: str) -> str:
        return self.cipher.encrypt(data.encode()).decode()

    def decrypt(self, data: str) -> str:
        try:
            return self.cipher.decrypt(data.encode()).decode()
        except Exception:
            return ""

encryptor = EncryptionManager()

class NetworkManager(QThread):
    """H√°l√≥zati kezel√©s"""
    models_loaded = pyqtSignal(list)
    error_occurred = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.free_only = True
        self.session = None

    async def fetch_models(self):
        try:
            async with aiohttp.ClientSession() as session:
                self.session = session
                async with session.get(MODEL_URL, timeout=10) as resp:
                    resp.raise_for_status()
                    data = await resp.json()
                    parsed = self.parse_models(data.get('data', []))
                    self.models_loaded.emit(parsed)
        except aiohttp.ClientError as e:
            self.error_occurred.emit(f"Network error: {e}")
        except Exception as e:
            self.error_occurred.emit(f"Unexpected error: {e}")
        finally:
            if self.session:
                await self.session.close()
                self.session = None

    def run(self):
        asyncio.run(self.fetch_models())

    def parse_models(self, models: List[Dict]) -> List[str]:
        result = []
        providers = {'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',
                     'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity', 'qwen'}

        for m in models:
            model_id = m.get('id', '')
            context = m.get('context_length')

            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt
            limits = m.get('limits', {})
            prompt = m.get('prompt', limits.get('prompt'))
            completion = m.get('completion', limits.get('completion'))

            is_free = ":free" in model_id

            # csak free modellek, ha kell
            if self.free_only and not is_free:
                continue

            # provider sz≈±r√©s
            if not any(p in model_id for p in providers):
                continue

            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0
            if isinstance(context, int):
                tokens = context // 1024
            elif prompt == 0 and completion == 0:
                tokens = 0
            else:
                continue

            label = f"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}"
            result.append(label)

        return sorted(result)

class AIWorker(QThread):
    """AI munkamenet kezel√©se"""
    update_received = pyqtSignal(str)
    response_completed = pyqtSignal(str)
    error_occurred = pyqtSignal(str, int)
    truncated = pyqtSignal()

    def __init__(self, api_key: str, messages: List[Dict], model: str,
                 temperature: float, max_tokens: int):
        super().__init__()
        self.api_key = api_key
        self.messages = messages
        self.model = model.split('|')[0].strip()
        self.temperature = temperature
        self.max_tokens = max_tokens
        self.running = True
        self.session = requests.Session()
        self.session.headers.update({
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        })

    def run(self):
        payload = {
            "model": self.model,
            "messages": self.messages,
            "temperature": self.temperature,
            "max_tokens": self.max_tokens,
            "reasoning": {"exclude": True},
            "transforms": ["middle-out"],
            "usage": {"include": True},
            "stream": True
        }

        try:
            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)
            if resp.status_code != 200:
                try:
                    resp.raise_for_status()
                except requests.exceptions.HTTPError as e:
                    err = resp.json().get('error', {}).get('message', 'Unknown error')
                    self.error_occurred.emit(str(e), resp.status_code)
                return

            buffer = bytearray()
            for chunk in resp.iter_lines():
                if not self.running:
                    return
                if chunk:
                    data = chunk[5:].strip() if chunk.startswith(b'data:') else chunk.strip()
                    if not data.startswith(b'{'):
                        continue
                    parsed = json.loads(data.decode('utf-8'))
                    choices = parsed.get('choices', [{}])
                    if choices:
                        delta = choices[0].get('delta', {})
                        content = delta.get('content', '')
                        if content:
                            buffer.extend(content.encode('utf-8'))
                            self.update_received.emit(buffer.decode('utf-8', errors='replace'))
                            buffer.clear()
                        finish_reason = choices[0].get('finish_reason')
                        if finish_reason == 'length':
                            self.truncated.emit()

            if buffer:
                self.update_received.emit(buffer.decode('utf-8', errors='replace'))

            self.response_completed.emit("K√©sz!")
        except requests.RequestException as e:
            self.error_occurred.emit(f"Network error: {e}", 500)
        except Exception as e:
            self.error_occurred.emit(f"Unexpected error: {e}", 500)

    def stop(self):
        self.running = False
        self.session.close()

from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPlainTextEdit
from PyQt5.QtGui import QColor
from PyQt5.QtCore import Qt
try:
    from PyQt5.Qsci import QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript, QsciLexerHTML, QsciLexerXML, QsciLexerJSON, QsciLexerSQL, QsciLexerBash
    HAS_SCINTILLA = True
except ImportError:
    HAS_SCINTILLA = False

class CodeEditor(QWidget):
    """K√≥dszerkeszt≈ë widget"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.layout = QVBoxLayout(self)
        self.layout.setContentsMargins(5, 5, 5, 5)

        if HAS_SCINTILLA:
            self.editor = QsciScintilla()
            self.editor.setAutoIndent(True)
            self.editor.setIndentationGuides(True)
            self.editor.setMarginLineNumbers(1, True)
            self.editor.setMarginWidth(1, "00000")
            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)
            self.editor.setCaretLineVisible(True)
            self.editor.setCaretLineBackgroundColor(QColor(200, 230, 200))
            
            # Be√°ll√≠tjuk a h√°tt√©rsz√≠nt a QsciScintilla eset√©n
            self.editor.SendScintilla(QsciScintilla.SCI_STYLESETBACK, QsciScintilla.STYLE_DEFAULT, QColor(204, 214, 203))  # Pasztel z√∂ld
        else:
            self.editor = QPlainTextEdit()
            self.editor.setReadOnly(True)

        # A QPlainTextEdit h√°tt√©rsz√≠n√©nek be√°ll√≠t√°sa
        self.editor.setStyleSheet("background-color:#ced6cb;")

        self.layout.addWidget(self.editor)

    def set_language(self, language):
        if not HAS_SCINTILLA:
            return
        lexer_map = {
            "python": QsciLexerPython,
            "cpp": QsciLexerCPP,
            "c++": QsciLexerCPP,
            "java": QsciLexerJava,
            "javascript": QsciLexerJavaScript,
            "js": QsciLexerJavaScript,
            "typescript": QsciLexerJavaScript,
            "ts": QsciLexerJavaScript,
            "php": QsciLexerHTML,
            "html": QsciLexerHTML,
            "xml": QsciLexerXML,
            "json": QsciLexerJSON,
            "sql": QsciLexerSQL,
            "bash": QsciLexerBash,
            "sh": QsciLexerBash
        }
        lexer = lexer_map.get(language.lower())
        if lexer:
            self.editor.setLexer(lexer())
        else:
            print(f"Lexer not found for language: {language}")

    def setText(self, text):
        if HAS_SCINTILLA:
            self.editor.setText(text)
        else:
            self.editor.setPlainText(text)

    def text(self):
        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()
class SearchDialog(QDialog):
    """Keres√©s dial√≥gusablak"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Keres√©s")
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)

        self.layout = QVBoxLayout(self)
        self.form = QFormLayout()

        self.search_edit = QLineEdit()
        self.search_edit.textChanged.connect(self.on_search_text_changed)
        self.form.addRow("Keres√©s:", self.search_edit)

        self.layout.addLayout(self.form)

        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.buttons.accepted.connect(self.find_next)
        self.buttons.rejected.connect(self.reject)
        self.layout.addWidget(self.buttons)

        self.find_next_btn = QPushButton("K√∂vetkez≈ë")
        self.find_prev_btn = QPushButton("El≈ëz≈ë")
        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)
        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)
        self.find_next_btn.clicked.connect(self.find_next)
        self.find_prev_btn.clicked.connect(self.find_prev)

        self.editor = parent.chat_display
        self.cursor = self.editor.textCursor()

    def on_search_text_changed(self, text):
        self.cursor = self.editor.textCursor()
        self.cursor.setPosition(0)

    def find_next(self):
        self._find(QTextDocument.FindFlags())

    def find_prev(self):
        self._find(QTextDocument.FindBackward)

    def _find(self, flags):
        text = self.search_edit.text()
        if not text:
            return
        cursor = self.editor.document().find(text, self.cursor, flags)
        if not cursor.isNull():
            self.editor.setTextCursor(cursor)
            self.cursor = cursor
        else:
            QMessageBox.information(self, "Keres√©s", "Nincs t√∂bb tal√°lat.")
            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)
            self._find(flags)

class TextReceiver(QObject):
    """Sz√∂vegkezel≈ë oszt√°ly"""
    update_text = pyqtSignal(str)

class MainWindow(QWidget):
    """F≈ëablak oszt√°ly"""
    def __init__(self):
        super().__init__()
        self.settings = SettingsManager()
        self.encryption_manager = EncryptionManager()
        self.network_manager = NetworkManager()
        self.worker = None

        self.history = []
        self.current_prompt = ""
        self.code_blocks = []
        self.buffered_text = ""
        self.update_interval = 80
        self.text_receiver = TextReceiver()
        self.text_receiver.update_text.connect(self.append_to_chat)
        self.is_generating = False
        self.code_tab_count = 0

        self.setup_ui()
        self.setup_connections()
        self.load_settings()
        self.setWindowIcon(self.get_application_icon())
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.flush_buffer)

    def setup_ui(self):
        """Fel√ºlet l√©trehoz√°sa"""
        self.setWindowTitle("Szita AI K√≥dasszisztens")
        self.setMinimumSize(1000, 700)

        main_layout = QVBoxLayout()
        toolbar = self.create_toolbar()
        main_layout.addWidget(toolbar)

        splitter = QSplitter(Qt.Horizontal)

        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        left_layout.setContentsMargins(5, 5, 5, 5)

        api_group = QGroupBox("API Be√°ll√≠t√°sok")
        api_layout = QVBoxLayout(api_group)

        key_layout = QHBoxLayout()
        self.key_combo = QComboBox()
        self.key_combo.setEditable(True)
        key_layout.addWidget(QLabel("Kulcs:"))
        key_layout.addWidget(self.key_combo)
        api_layout.addLayout(key_layout)

        model_layout = QHBoxLayout()
        self.free_check = QCheckBox("Csak Ingyenes")
        self.free_check.setChecked(True)
        model_layout.addWidget(self.free_check)
        model_layout.addWidget(QLabel("Modell:"))
        self.model_combo = QComboBox()
        model_layout.addWidget(self.model_combo)
        model_layout.setStretch(2, 1)
        api_layout.addLayout(model_layout)

        param_layout = QHBoxLayout()
        param_layout.addWidget(QLabel("H≈ëm√©rs√©klet:"))
        self.temp_spin = QDoubleSpinBox()
        self.temp_spin.setRange(0.0, 2.0)
        self.temp_spin.setSingleStep(0.1)
        self.temp_spin.setValue(DEFAULT_TEMP)
        param_layout.addWidget(self.temp_spin)

        param_layout.addWidget(QLabel("Max tokenek:"))
        self.token_combo = QComboBox()
        for t in TOKEN_OPTIONS:
            self.token_combo.addItem(f"{t // 1024}K", t)
        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)
        param_layout.addWidget(self.token_combo)

        api_layout.addLayout(param_layout)
        left_layout.addWidget(api_group)

        input_group = QGroupBox("K√©r√©s")
        input_layout = QVBoxLayout(input_group)
        self.input_edit = QTextEdit()
        self.input_edit.setPlaceholderText("√çrd ide a k√©rd√©sed...")
        input_layout.addWidget(self.input_edit)

        btn_layout = QHBoxLayout()
        self.upload_btn = QPushButton("F√°jl felt√∂lt√©s")
        self.send_btn = QPushButton("K√ºld√©s")
        self.cont_btn = QPushButton("Folytat√°s")
        self.stop_btn = QPushButton("Le√°ll√≠t√°s")
        btn_layout.addWidget(self.upload_btn)
        btn_layout.addWidget(self.send_btn)
        btn_layout.addWidget(self.cont_btn)
        btn_layout.addWidget(self.stop_btn)
        input_layout.addLayout(btn_layout)
        left_layout.addWidget(input_group, 1)

        splitter.addWidget(left_panel)

        self.right_panel = QWidget()
        right_layout = QVBoxLayout(self.right_panel)
        right_layout.setContentsMargins(5, 5, 5, 5)

        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("Keres√©s a chatben...")
        self.search_bar.textChanged.connect(self.search_chat)
        right_layout.addWidget(self.search_bar)

        self.tab_widget = QTabWidget()
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)

        self.chat_display = QTextEdit()
        self.chat_display.setReadOnly(True)
        self.chat_display.setFont(QFont("Segoe UI", 10))
        self.tab_widget.addTab(self.chat_display, "Chat")

        self.copy_btn = QPushButton("K√≥d m√°sol√°sa")
        self.copy_btn.clicked.connect(self.copy_code)
        self.copy_btn.setEnabled(False)

        right_layout.addWidget(self.tab_widget, 1)
        btn_layout_right = QHBoxLayout()
        btn_layout_right.addWidget(self.copy_btn)
        btn_layout_right.addStretch(1)
        right_layout.addLayout(btn_layout_right)

        self.status_bar = QStatusBar()
        right_layout.addWidget(self.status_bar)

        splitter.addWidget(self.right_panel)
        splitter.setSizes([400, 600])

        main_layout.addWidget(splitter, 1)
        self.setLayout(main_layout)

        self.apply_dark_theme()

    def create_toolbar(self):
        """Eszk√∂zt√°r l√©trehoz√°sa"""
        toolbar = QToolBar()
        toolbar.setIconSize(QSize(24, 24))

        def add_action(icon, text, callback):
            act = QAction(QIcon.fromTheme(icon), text, self)
            act.triggered.connect(callback)
            toolbar.addAction(act)

        add_action('document-save', "Ment√©s", self.save_chat)
        add_action('document-open', "Bet√∂lt√©s", self.load_chat)
        add_action('edit-clear', "T√∂rl√©s", self.clear_chat_display)
        add_action('edit-clear', "El≈ëzm√©nyek t√∂rl√©se", self.clear_history)

        toolbar.addSeparator()

        self.history_menu = QMenu("El≈ëzm√©nyek", self)
        menu_btn = QToolButton()
        menu_btn.setText("El≈ëzm√©nyek")
        menu_btn.setMenu(self.history_menu)
        menu_btn.setPopupMode(QToolButton.InstantPopup)
        toolbar.addWidget(menu_btn)

        key_menu = QMenu("Kulcsok", self)
        add_action = QAction("√öj kulcs hozz√°ad√°sa", self)
        add_action.triggered.connect(self.add_api_key)
        key_menu.addAction(add_action)
        toolbar.addAction(key_menu.menuAction())

        self.update_history_menu()
        return toolbar

    def setup_connections(self):
        """Kapcsolatok l√©trehoz√°sa"""
        self.send_btn.clicked.connect(self.send_request)
        self.stop_btn.clicked.connect(self.stop_request)
        self.cont_btn.clicked.connect(self.continue_request)
        self.upload_btn.clicked.connect(self.upload_file)
        self.free_check.stateChanged.connect(self.refresh_models)
        self.tab_widget.currentChanged.connect(self.update_copy_button_state)

        self.refresh_models()
        self.load_api_keys()

        QShortcut(QKeySequence("Ctrl+Return"), self).activated.connect(self.send_request)
        QShortcut(QKeySequence("Ctrl+Shift+Return"), self).activated.connect(self.continue_request)
        QShortcut(QKeySequence("Ctrl+F"), self).activated.connect(self.show_search_dialog)

    def show_search_dialog(self):
        """Keres√©s dial√≥gus megjelen√≠t√©se"""
        self.search_dialog = SearchDialog(self)
        self.search_dialog.show()

    def update_copy_button_state(self, index):
        """M√°sol√°s gomb √°llapot√°nak friss√≠t√©se"""
        self.copy_btn.setEnabled(index > 0)

    def apply_dark_theme(self):
        """S√∂t√©t t√©ma alkalmaz√°sa"""
        palette = QPalette()
        palette.setColor(QPalette.Window, QColor("#2c3e50"))
        palette.setColor(QPalette.WindowText, QColor("#ecf0f1"))
        palette.setColor(QPalette.Base, QColor("#34495e"))
        palette.setColor(QPalette.AlternateBase, QColor("#2c3e50"))
        palette.setColor(QPalette.ToolTipBase, QColor("#34495e"))
        palette.setColor(QPalette.ToolTipText, QColor("#ecf0f1"))
        palette.setColor(QPalette.Text, QColor("#ecf0f1"))
        palette.setColor(QPalette.Button, QColor("#3498db"))
        palette.setColor(QPalette.ButtonText, QColor("#ffffff"))
        palette.setColor(QPalette.Highlight, QColor("#3498db"))
        palette.setColor(QPalette.HighlightedText, QColor("#ffffff"))

        app.setStyle("Fusion")
        self.setPalette(palette)
        self.setStyleSheet("""
            QWidget { background-color:#2c3e50; color:#ecf0f1; font-family:"Segoe UI"; font-size:14px; }
            QTextEdit, QPlainTextEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:12px; }
            QComboBox, QDoubleSpinBox, QSpinBox, QLineEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:8px; }
            QPushButton { background:#3498db; color:white; padding:10px 20px; border-radius:8px; border:none; font-weight:bold; }
            QPushButton:hover { background:#2980b9; }
            QPushButton:pressed { background:#2471a3; }
            QPushButton:disabled { background:#7f8c8d; color:#bdc3c7; }
            QStatusBar { color:#95a5a6; font-size:12px; background:#232f34; border-top:1px solid #2c3e50; }
            QTabWidget::pane { border:1px solid #2c3e50; background:#232f34; border-radius:8px; }
            QTabBar::tab { background:#34495e; color:#ecf0f1; padding:8px 16px; border-top-left-radius:8px; border-top-right-radius:8px; }
            QTabBar::tab:selected { background:#2c3e50; }
            QGroupBox { border:1px solid #2c3e50; border-radius:8px; margin-top:1em; padding:10px; }
            QGroupBox::title { left:10px; padding:0 3px; color:#ecf0f1; }
            QToolBar { background:#232f34; padding:5px; }
            QToolButton { background:transparent; border:none; padding:5px; color:#ecf0f1; }
            QToolButton:hover { background:#34495e; border-radius:4px; }
            QMenu { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:4px; }
            QMenu::item { padding:8px 20px; }
            QMenu::item:selected { background:#3498db; }
            QScrollBar:vertical { background:#232f34; width:10px; }
            QScrollBar::handle:vertical { background:#3498db; min-height:20px; border-radius:5px; }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height:0px; }
        """)

    def load_settings(self):
        """Be√°ll√≠t√°sok bet√∂lt√©se"""
        try:
            size = self.settings.get('window_size', '1000x700')
            w, h = map(int, size.split('x'))
            self.resize(w, h)
        except Exception:
            self.resize(1000, 700)

        self.move(QApplication.desktop().screenGeometry().center() - self.frameGeometry().center())
        self.temp_spin.setValue(float(self.settings.get('temperature', DEFAULT_TEMP)))
        tokens = int(self.settings.get('max_tokens', 4096))
        idx = next((i for i, t in enumerate(TOKEN_OPTIONS) if t == tokens), DEFAULT_TOKENS_INDEX)
        self.token_combo.setCurrentIndex(idx)
        self.free_check.setChecked(self.settings.get('free_models', 'true') == 'true')

    def save_settings(self):
        """Be√°ll√≠t√°sok ment√©se"""
        self.settings.set('window_size', f"{self.width()}x{self.height()}")
        self.settings.set('temperature', self.temp_spin.value())
        self.settings.set('max_tokens', self.token_combo.currentData())
        self.settings.set('free_models', self.free_check.isChecked())

    def closeEvent(self, event):
        """Ablak bez√°r√°sakor"""
        self.autosave_history()
        self.save_settings()
        if self.worker and self.worker.isRunning():
            self.worker.stop()
            self.worker.wait()
        super().closeEvent(event)

    def autosave_history(self):
        """Automatikus el≈ëzm√©nyek ment√©se"""
        if not self.history:
            return
        ts = time.strftime("%Y%m%d-%H%M%S")
        fn = os.path.join(self.settings.history_dir, f"autosave_{ts}.json")
        try:
            with open(fn, 'w', encoding='utf-8') as f:
                json.dump(self.history, f, ensure_ascii=False, indent=2)
        except Exception:
            pass

    def update_history_menu(self):
        """El≈ëzm√©nyek men√º friss√≠t√©se"""
        self.history_menu.clear()
        files = sorted([f for f in os.listdir(self.settings.history_dir) if f.endswith('.json')])
        for f in files[-MAX_HISTORY:]:
            act = self.history_menu.addAction(f)
            act.triggered.connect(lambda _, fn=f: self.load_history_file(fn))
        if not files:
            self.history_menu.addAction("Nincs el≈ëzm√©ny")

    def load_history_file(self, filename):
        """El≈ëzm√©ny bet√∂lt√©se"""
        path = os.path.join(self.settings.history_dir, filename)
        try:
            with open(path, 'r', encoding='utf-8') as f:
                self.history = json.load(f)
            self.clear_chat_display()
            for m in self.history:
                role = m.get('role', 'user')
                content = m.get('content', '')
                self.append_to_chat(f"**{role.capitalize()}:** {content}\n\n", role=role)
            self.process_code_blocks()
            self.status_bar.showMessage(f"El≈ëzm√©ny bet√∂ltve: {filename}")
        except Exception as e:
            QMessageBox.critical(self, "El≈ëzm√©ny bet√∂lt√©si hiba", str(e))

    def clear_history(self):
        """El≈ëzm√©nyek t√∂rl√©se"""
        reply = QMessageBox.question(self, "El≈ëzm√©nyek t√∂rl√©se",
                                     "Biztosan t√∂rl√∂d az √∂sszes el≈ëzm√©nyt?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                for f in os.listdir(self.settings.history_dir):
                    p = os.path.join(self.settings.history_dir, f)
                    if os.path.isfile(p):
                        os.unlink(p)
                self.history = []
                self.update_history_menu()
                QMessageBox.information(self, "T√∂rl√©s", "Az √∂sszes el≈ëzm√©ny t√∂r√∂lve.")
            except Exception as e:
                QMessageBox.critical(self, "Hiba", str(e))

    def load_api_keys(self):
        """API kulcsok bet√∂lt√©se"""
        data = self.settings.get('api_keys', {})
        self.key_combo.clear()
        for name, enc in data.items():
            try:
                dec = self.encryption_manager.decrypt(enc)
                if dec:
                    self.key_combo.addItem(name, dec)
            except Exception:
                pass
        if self.key_combo.count():
            self.key_combo.setCurrentIndex(0)

    def add_api_key(self):
        """√öj API kulcs hozz√°ad√°sa"""
        dlg = QDialog(self)
        dlg.setWindowTitle("√öj API kulcs")
        l = QFormLayout(dlg)
        name_edit = QLineEdit()
        key_edit = QLineEdit()
        l.addRow("N√©v:", name_edit)
        l.addRow("Kulcs:", key_edit)
        btn = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        btn.accepted.connect(dlg.accept)
        btn.rejected.connect(dlg.reject)
        l.addRow(btn)
        if dlg.exec_() == QDialog.Accepted:
            name = name_edit.text().strip()
            key = key_edit.text().strip()
            if name and key:
                data = self.settings.get('api_keys', {})
                data[name] = self.encryption_manager.encrypt(key)
                self.settings.set('api_keys', data)
                self.load_api_keys()
                self.key_combo.setCurrentText(name)

    def refresh_models(self):
        """Modellek friss√≠t√©se"""
        try:
            self.network_manager.models_loaded.disconnect(self.populate_models)
        except TypeError:
            pass
        self.model_combo.clear()
        self.network_manager.free_only = self.free_check.isChecked()
        self.network_manager.models_loaded.connect(self.populate_models)
        self.network_manager.error_occurred.connect(self.show_error)
        self.network_manager.start()

    def populate_models(self, models):
        """Modellek bet√∂lt√©se"""
        self.model_combo.addItems(models)
        if self.model_combo.count():
            last = self.settings.get('last_model')
            if last and last in models:
                self.model_combo.setCurrentIndex(models.index(last))
            else:
                self.model_combo.setCurrentIndex(0)

    def upload_file(self):
        """F√°jl felt√∂lt√©se"""
        fp, _ = QFileDialog.getOpenFileName(self, "F√°jl felt√∂lt√©s",
                                            "", "Minden f√°jl (*);;Sz√∂vegf√°jlok (*.txt);;K√≥d (*.py *.c *.cpp *.java)",
                                            options=QFileDialog.Options())
        if fp:
            try:
                with open(fp, 'r', encoding='utf-8') as f:
                    txt = f.read()
                if len(txt) > MAX_FILE_SIZE:
                    QMessageBox.warning(self, "T√∫l nagy f√°jl",
                                        f"F√°jl m√©rete ({len(txt)} karakter) meghaladja a {MAX_FILE_SIZE} karaktert.")
                    return
                self.input_edit.setPlainText(
                    f"A k√∂vetkez≈ë k√≥d van felt√∂ltve:\n```plaintext\n{txt}\n```\n\nK√©r√©s:")
            except Exception as e:
                QMessageBox.critical(self, "Hiba", f"F√°jl olvas√°si hiba: {e}")

    def send_request(self):
        """K√©r√©s k√ºld√©se"""
        self.start_request(False)

    def continue_request(self):
        """K√©r√©s folytat√°sa"""
        self.start_request(True)

    def start_request(self, continue_conv: bool):
        """K√©r√©s kezdem√©nyez√©se"""
        self.current_prompt = self.input_edit.toPlainText().strip()
        if not self.current_prompt and not continue_conv:
            QMessageBox.warning(self, "√úres k√©r√©s", "K√©rlek, √≠rj be egy k√©rd√©st!")
            return
        api_key = self.key_combo.currentData()
        if not api_key:
            QMessageBox.warning(self, "Hi√°nyz√≥ API kulcs", "K√©rlek, add meg az API kulcsot!")
            return
        model = self.model_combo.currentText()
        if not model:
            QMessageBox.warning(self, "Hi√°nyz√≥ modell", "K√©rlek, v√°lassz egy modellt!")
            return

        self.set_ui_state(False)
        self.is_generating = True
        if not continue_conv:
            self.history.append({"role": "user", "content": self.current_prompt})
            self.append_to_chat(f"**Felhaszn√°l√≥:** {self.current_prompt}\n\n", role="user")
        else:
            last_resp = self.history[-1]["content"] if self.history and self.history[-1]["role"] == "assistant" else ""
            self.history.append({
                "role": "user",
                "content": f"\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!\n"
            })

        self.status_bar.showMessage("K√©r√©s folyamatban‚Ä¶")
        self.start_worker(api_key, model)
        self.set_generating_background(True)

    def set_ui_state(self, enabled: bool):
        """Fel√ºlet √°llapot√°nak be√°ll√≠t√°s"""
        self.send_btn.setEnabled(enabled)
        self.cont_btn.setEnabled(enabled)
        self.upload_btn.setEnabled(enabled)
        self.input_edit.setEnabled(enabled)
        self.stop_btn.setEnabled(not enabled)

    def start_worker(self, api_key, model):
        """Munkamenet ind√≠t√°sa"""
        self.worker = AIWorker(
            api_key,
            self.history,
            model,
            self.temp_spin.value(),
            self.token_combo.currentData()
        )
        self.worker.update_received.connect(self.handle_update)
        self.worker.response_completed.connect(self.request_completed)
        self.worker.error_occurred.connect(self.show_error)
        self.worker.truncated.connect(self.show_truncated_message)
        self.worker.start()

    def handle_update(self, text: str):
        """V√°laszkezel√©s"""
        self.buffered_text += text
        if not self.update_timer.isActive():
            self.update_timer.start(self.update_interval)

    def flush_buffer(self):
        """Pufferv√°lasz ki√ºr√≠t√©se"""
        if self.buffered_text:
            self.text_receiver.update_text.emit(self.buffered_text)
            self.buffered_text = ""
        if self.worker and (not self.worker.isRunning() or not self.is_generating):
            self.update_timer.stop()

    def append_to_chat(self, text: str, role: str = None):
        """Sz√∂veg hozz√°ad√°sa a chathez"""
        cursor = self.chat_display.textCursor()
        cursor.movePosition(QTextCursor.End)
        fmt = QTextCharFormat()
        if role == "user":
            fmt.setForeground(QColor("#3498db"))
        elif self.is_generating:
            fmt.setForeground(QColor("#2ecc71"))
        cursor.insertText(text, fmt)
        self.chat_display.ensureCursorVisible()
        self.process_code_blocks()

    def request_completed(self, status: str):
        """K√©r√©s befejez√©se"""
        if self.buffered_text:
            self.text_receiver.update_text.emit(self.buffered_text)
            self.buffered_text = ""
        assistant_text = self.chat_display.toPlainText().split("Felhaszn√°l√≥:")[-1].strip()
        self.history.append({"role": "assistant", "content": assistant_text})
        self.set_ui_state(True)
        self.status_bar.showMessage(status)
        self.update_history_menu()
        self.settings.set('last_model', self.model_combo.currentText())
        self.autosave_history()
        self.is_generating = False
        self.set_generating_background(False)
        self.input_edit.clear()
         

    def show_error(self, msg: str, code: int = None):
        """Hiba megjelen√≠t√©se"""
        e = f"Hiba: {msg}"
        if code:
            e += f" (St√°tusz: {code})"
        QMessageBox.critical(self, "Hiba", e)
        self.status_bar.showMessage(e)
        self.set_ui_state(True)
        self.is_generating = False
        self.set_generating_background(False)

    def show_truncated_message(self):
        """V√°lasz folytat√°sa"""
        dlg = QDialog(self)
        dlg.setWindowTitle("Folytat√°s...")
        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        dlg.setAttribute(Qt.WA_DeleteOnClose)
        v = QVBoxLayout()
        lbl = QLabel("A v√°lasz folytat√≥dik‚Ä¶")
        lbl.setAlignment(Qt.AlignCenter)
        lbl.setStyleSheet("font-size:16px; padding:20px;")
        v.addWidget(lbl)
        dlg.setLayout(v)
        dlg.setFixedSize(300, 100)
        QTimer.singleShot(3000, dlg.close)
        QTimer.singleShot(3000, self.continue_request)
        dlg.exec_()

    def clear_chat_display(self):
        """Chat t√∂rl√©se"""
        self.chat_display.clear()
        self.code_blocks = []
        while self.tab_widget.count() > 1:
            self.tab_widget.removeTab(1)
        self.code_tab_count = 0

    def save_chat(self):
        """Chat ment√©se"""
        fn, _ = QFileDialog.getSaveFileName(self, "Chat ment√©se",
                                            "", "JSON f√°jl (*.json);;Minden f√°jl (*)",
                                            options=QFileDialog.Options())
        if fn:
            try:
                with open(fn, 'w', encoding='utf-8') as f:
                    json.dump(self.history, f, ensure_ascii=False, indent=2)
                self.status_bar.showMessage(f"Chat mentve: {fn}")
            except Exception as e:
                QMessageBox.critical(self, "Ment√©si hiba", str(e))

    def load_chat(self):
        """Chat bet√∂lt√©se"""
        fn, _ = QFileDialog.getOpenFileName(self, "Chat bet√∂lt√©se",
                                            "", "JSON f√°jl (*.json);;Minden f√°jl (*)",
                                            options=QFileDialog.Options())
        if fn:
            try:
                with open(fn, 'r', encoding='utf-8') as f:
                    self.history = json.load(f)
                self.clear_chat_display()
                for m in self.history:
                    role = m.get('role', 'user')
                    content = m.get('content', '')
                    self.append_to_chat(f"**{role.capitalize()}:** {content}\n\n", role=role)
                self.process_code_blocks()
                self.status_bar.showMessage(f"Chat bet√∂ltve: {fn}")
            except Exception as e:
                QMessageBox.critical(self, "Bet√∂lt√©si hiba", str(e))

    def process_code_blocks(self):
        """K√≥dblokkok feldolgoz√°sa"""
        text = self.chat_display.toPlainText()
        for m in re.finditer(r"^(```([a-zA-Z]{3,})\n(.*?)\n```)$",
                             text, re.MULTILINE | re.DOTALL):
            lang = m.group(2).strip() or "plaintext"
            code = m.group(3).strip()
            self.add_code_tab(lang, code)

    def add_code_tab(self, lang, code):
        """√öj k√≥df√ºl l√©trehoz√°sa"""
        for i in range(1, self.tab_widget.count()):
            w = self.tab_widget.widget(i)
            if isinstance(w, CodeEditor) and w.text() == code:
                return
        editor = CodeEditor()
        editor.set_language(lang)
        editor.setText(code)
        self.code_tab_count += 1
        self.tab_widget.addTab(editor, f"K√≥d {self.code_tab_count} ({lang})")

    def copy_code(self):
        """K√≥d m√°sol√°sa"""
        idx = self.tab_widget.currentIndex()
        if idx <= 0:
            return
        w = self.tab_widget.widget(idx)
        if isinstance(w, CodeEditor):
            QApplication.clipboard().setText(w.text())
            self.status_bar.showMessage("K√≥d m√°solva a v√°g√≥lapra!")

    def close_tab(self, idx):
        """F√ºl bez√°r√°sa"""
        w = self.tab_widget.widget(idx)
        if w:
            w.deleteLater()
        self.tab_widget.removeTab(idx)
        self.update_copy_button_state(self.tab_widget.currentIndex())

    def search_chat(self, txt):
        """Chat keres√©se"""
        if not txt:
            self.reset_chat_formatting()
            return
        self.reset_chat_formatting()
        cursor = self.chat_display.textCursor()
        orig = cursor.position()
        fmt = QTextCharFormat()
        fmt.setBackground(QColor("yellow"))
        self.chat_display.moveCursor(QTextCursor.Start)
        while self.chat_display.find(txt):
            self.chat_display.textCursor().mergeCharFormat(fmt)
        self.chat_display.setTextCursor(cursor)
        cursor.setPosition(orig)

    def reset_chat_formatting(self):
        """Chat form√°z√°s vissza√°ll√≠t√°sa"""
        cursor = self.chat_display.textCursor()
        cursor.select(QTextCursor.Document)
        fmt = QTextCharFormat()
        fmt.setBackground(Qt.transparent)
        cursor.mergeCharFormat(fmt)
        cursor.clearSelection()
        self.chat_display.setTextCursor(cursor)

    def set_generating_background(self, is_gen):
        """√Ållapotf√ºgg≈ë anim√°lt h√°tt√©r be√°ll√≠t√°sa"""
        # Megl√©v≈ë timer le√°ll√≠t√°sa
        if hasattr(self, 'bg_timer') and self.bg_timer.isActive():
            self.bg_timer.stop()

        # Kezd≈ë √©s v√©g sz√≠nek meghat√°roz√°sa
        start_color = QColor(52, 73, 94)  # #34495e - alap sz√≠n
        end_color = QColor(30,  30, 30)   # #54695e - gener√°l√°s sz√≠n
        
        if is_gen:
            self.bg_colors = [start_color, end_color]
            
        else:
            self.bg_colors = [end_color, start_color]  # Vissza az eredeti sz√≠nre

        self.current_step = 0
        self.steps = 50  # Kevesebb l√©p√©s gyorsabb √°tmenet
        self.bg_timer = QTimer()
        self.bg_timer.timeout.connect(self._update_background_color)
        self.bg_timer.start(20)  # 20 ms -> 50 FPS

    def _update_background_color(self):
        """H√°tt√©rsz√≠n friss√≠t√©se az anim√°ci√≥hoz"""
        if self.current_step <= self.steps:
            # Sz√≠n interpol√°ci√≥
            start_color = self.bg_colors[0]
            end_color = self.bg_colors[1]
            
            ratio = self.current_step / self.steps
            
            r = int(start_color.red() + (end_color.red() - start_color.red()) * ratio)
            g = int(start_color.green() + (end_color.green() - start_color.green()) * ratio)
            b = int(start_color.blue() + (end_color.blue() - start_color.blue()) * ratio)
            
            color = QColor(r, g, b)
            self.chat_display.setStyleSheet(f"background-color: {color.name()};")
            
            self.current_step += 1
        else:
            # Anim√°ci√≥ v√©ge - timer le√°ll√≠t√°sa
            self.bg_timer.stop()
            # Biztos√≠tjuk, hogy a v√©gs≈ë sz√≠n be√°ll√≠tva legyen
            final_color = self.bg_colors[1]
            self.chat_display.setStyleSheet(f"background-color: {final_color.name()};")
  

    def get_icon_path(self, name):
        """Ikon el√©r√©si √∫tja"""
        for p in [os.path.join(os.path.dirname(__file__), name),
                  os.path.join(self.settings.config_dir, name),
                  getattr(sys, "_MEIPASS", "")]:
            if os.path.exists(p):
                return p
        return None

    def get_icon(self, name):
        """Ikon bet√∂lt√©se"""
        path = self.get_icon_path(name)
        return QIcon(path) if path else QIcon()

    def get_application_icon(self):
        """Alkalmaz√°s ikonj√°nak bet√∂lt√©se"""
        return self.get_icon("icon.ico") or self.get_icon("icon.png") or QIcon()

    def stop_request(self):
        """K√©r√©s le√°ll√≠t√°sa"""
        if self.worker and self.worker.isRunning():
            self.worker.stop()
            self.worker.wait()
            self.set_ui_state(True)
            self.is_generating = False
            self.set_generating_background(False)
            self.status_bar.showMessage("K√©r√©s le√°ll√≠tva.")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())

    
    #--hidden-import=cryptography --hidden-import=cryptography.fernet --hidden-import=psutil --hidden-import=aiohttp --hidden-import=asyncio --hidden-import=PyQt5.sip --hidden-import=PyQt5.QtCore --hidden-import=PyQt5.QtGui --hidden-import=PyQt5.QtWidgets --hidden-import=PyQt5.Qsci

 