[
  {
    "role": "user",
    "content": "import sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(2, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn.setEnabled(False)\n\n\n        right_layout.addWidget(self.tab_widget, 1)\n        btn_layout_right = QHBoxLayout()\n        btn_layout_right.addWidget(self.copy_btn)\n        btn_layout_right.addStretch(1)\n        right_layout.addLayout(btn_layout_right)\n\n\n        self.status_bar = QStatusBar()\n        right_layout.addWidget(self.status_bar)\n\n\n        splitter.addWidget(self.right_panel)\n        splitter.setSizes([400, 600])\n\n\n        main_layout.addWidget(splitter, 1)\n        self.setLayout(main_layout)\n\n\n        self.apply_dark_theme()\n\n\n    def create_toolbar(self):\n        \"\"\"Eszk√∂zt√°r l√©trehoz√°sa\"\"\"\n        toolbar = QToolBar()\n        toolbar.setIconSize(QSize(24, 24))\n\n\n        def add_action(icon, text, callback):\n            act = QAction(QIcon.fromTheme(icon), text, self)\n            act.triggered.connect(callback)\n            toolbar.addAction(act)\n\n\n        add_action('document-save', \"Ment√©s\", self.save_chat)\n        add_action('document-open', \"Bet√∂lt√©s\", self.load_chat)\n        add_action('edit-clear', \"T√∂rl√©s\", self.clear_chat_display)\n        add_action('edit-clear', \"El≈ëzm√©nyek t√∂rl√©se\", self.clear_history)\n\n\n        toolbar.addSeparator()\n\n\n        self.history_menu = QMenu(\"El≈ëzm√©nyek\", self)\n        menu_btn = QToolButton()\n        menu_btn.setText(\"El≈ëzm√©nyek\")\n        menu_btn.setMenu(self.history_menu)\n        menu_btn.setPopupMode(QToolButton.InstantPopup)\n        toolbar.addWidget(menu_btn)\n\n\n        key_menu = QMenu(\"Kulcsok\", self)\n        add_action = QAction(\"√öj kulcs hozz√°ad√°sa\", self)\n        add_action.triggered.connect(self.add_api_key)\n        key_menu.addAction(add_action)\n        toolbar.addAction(key_menu.menuAction())\n\n\n        self.update_history_menu()\n        return toolbar\n\n\n    def setup_connections(self):\n        \"\"\"Kapcsolatok l√©trehoz√°sa\"\"\"\n        self.send_btn.clicked.connect(self.send_request)\n        self.cont_btn.clicked.connect(self.continue_request)\n        self.upload_btn.clicked.connect(self.upload_file)\n        self.free_check.stateChanged.connect(self.refresh_models)\n        self.tab_widget.currentChanged.connect(self.update_copy_button_state)\n\n\n        self.refresh_models()\n        self.load_api_keys()\n\n\n        QShortcut(QKeySequence(\"Ctrl+Return\"), self).activated.connect(self.send_request)\n        QShortcut(QKeySequence(\"Ctrl+Shift+Return\"), self).activated.connect(self.continue_request)\n        QShortcut(QKeySequence(\"Ctrl+F\"), self).activated.connect(self.show_search_dialog)\n\n\n    def show_search_dialog(self):\n        \"\"\"Keres√©s dial√≥gus megjelen√≠t√©se\"\"\"\n        self.search_dialog = SearchDialog(self)\n        self.search_dialog.show()\n\n\n    def update_copy_button_state(self, index):\n        \"\"\"M√°sol√°s gomb √°llapot√°nak friss√≠t√©se\"\"\"\n        self.copy_btn.setEnabled(index > 0)\n\n\n    def apply_dark_theme(self):\n        \"\"\"S√∂t√©t t√©ma alkalmaz√°sa\"\"\"\n        palette = QPalette()\n        palette.setColor(QPalette.Window, QColor(\"#2c3e50\"))\n        palette.setColor(QPalette.WindowText, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Base, QColor(\"#34495e\"))\n        palette.setColor(QPalette.AlternateBase, QColor(\"#2c3e50\"))\n        palette.setColor(QPalette.ToolTipBase, QColor(\"#34495e\"))\n        palette.setColor(QPalette.ToolTipText, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Text, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Button, QColor(\"#3498db\"))\n        palette.setColor(QPalette.ButtonText, QColor(\"#ffffff\"))\n        palette.setColor(QPalette.Highlight, QColor(\"#3498db\"))\n        palette.setColor(QPalette.HighlightedText, QColor(\"#ffffff\"))\n\n\n        app.setStyle(\"Fusion\")\n        self.setPalette(palette)\n        self.setStyleSheet(\"\"\"\n            QWidget { background-color:#2c3e50; color:#ecf0f1; font-family:\"Segoe UI\"; font-size:14px; }\n            QTextEdit, QPlainTextEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:12px; }\n            QComboBox, QDoubleSpinBox, QSpinBox, QLineEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:8px; }\n            QPushButton { background:#3498db; color:white; padding:10px 20px; border-radius:8px; border:none; font-weight:bold; }\n            QPushButton:hover { background:#2980b9; }\n            QPushButton:pressed { background:#2471a3; }\n            QPushButton:disabled { background:#7f8c8d; color:#bdc3c7; }\n            QStatusBar { color:#95a5a6; font-size:12px; background:#232f34; border-top:1px solid #2c3e50; }\n            QTabWidget::pane { border:1px solid #2c3e50; background:#232f34; border-radius:8px; }\n            QTabBar::tab { background:#34495e; color:#ecf0f1; padding:8px 16px; border-top-left-radius:8px; border-top-right-radius:8px; }\n            QTabBar::tab:selected { background:#2c3e50; }\n            QGroupBox { border:1px solid #2c3e50; border-radius:8px; margin-top:1em; padding:10px; }\n            QGroupBox::title { left:10px; padding:0 3px; color:#ecf0f1; }\n            QToolBar { background:#232f34; padding:5px; }\n            QToolButton { background:transparent; border:none; padding:5px; color:#ecf0f1; }\n            QToolButton:hover { background:#34495e; border-radius:4px; }\n            QMenu { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:4px; }\n            QMenu::item { padding:8px 20px; }\n            QMenu::item:selected { background:#3498db; }\n            QScrollBar:vertical { background:#232f34; width:10px; }\n            QScrollBar::handle:vertical { background:#3498db; min-height:20px; border-radius:5px; }\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height:0px; }\n        \"\"\")\n\n\n    def load_settings(self):\n        \"\"\"Be√°ll√≠t√°sok bet√∂lt√©se\"\"\"\n        try:\n            size = self.settings.get('window_size', '1000x700')\n            w, h = map(int, size.split('x'))\n            self.resize(w, h)\n        except Exception:\n            self.resize(1000, 700)\n\n\n        self.move(QApplication.desktop().screenGeometry().center() - self.frameGeometry().center())\n        self.temp_spin.setValue(float(self.settings.get('temperature', DEFAULT_TEMP)))\n        tokens = int(self.settings.get('max_tokens', 4096))\n        idx = next((i for i, t in enumerate(TOKEN_OPTIONS) if t == tokens), DEFAULT_TOKENS_INDEX)\n        self.token_combo.setCurrentIndex(idx)\n        self.free_check.setChecked(self.settings.get('free_models', 'true') == 'true')\n\n\n    def save_settings(self):\n        \"\"\"Be√°ll√≠t√°sok ment√©se\"\"\"\n        self.settings.set('window_size', f\"{self.width()}x{self.height()}\")\n        self.settings.set('temperature', self.temp_spin.value())\n        self.settings.set('max_tokens', self.token_combo.currentData())\n        self.settings.set('free_models', self.free_check.isChecked())\n\n\n    def closeEvent(self, event):\n        \"\"\"Ablak bez√°r√°sakor\"\"\"\n        self.autosave_history()\n        self.save_settings()\n        if self.worker and self.worker.isRunning():\n            self.worker.stop()\n            self.worker.wait()\n        gc.collect()\n        super().closeEvent(event)\n\n\n    def autosave_history(self):\n        \"\"\"Automatikus el≈ëzm√©nyek ment√©se\"\"\"\n        if not self.history:\n            return\n        ts = time.strftime(\"%Y%m%d-%H%M%S\")\n        fn = os.path.join(self.settings.history_dir, f\"autosave_{ts}.json\")\n        try:\n            with open(fn, 'w', encoding='utf-8') as f:\n                json.dump(self.history, f, ensure_ascii=False, indent=2)\n        except Exception:\n            pass\n\n\n    def update_history_menu(self):\n        \"\"\"El≈ëzm√©nyek men√º friss√≠t√©se\"\"\"\n        self.history_menu.clear()\n        files = sorted([f for f in os.listdir(self.settings.history_dir) if f.endswith('.json')])\n        for f in files[-MAX_HISTORY:]:\n            act = self.history_menu.addAction(f)\n            act.triggered.connect(lambda _, fn=f: self.load_history_file(fn))\n        if not files:\n            self.history_menu.addAction(\"Nincs el≈ëzm√©ny\")\n\n\n    def load_history_file(self, filename):\n        \"\"\"El≈ëzm√©ny bet√∂lt√©se\"\"\"\n        path = os.path.join(self.settings.history_dir, filename)\n        try:\n            with open(path, 'r', encoding='utf-8') as f:\n                self.history = json.load(f)\n            self.clear_chat_display()\n            for m in self.history:\n                role = m.get('role', 'user')\n                content = m.get('content', '')\n                self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n            self.process_code_blocks()\n            self.status_bar.showMessage(f\"El≈ëzm√©ny bet√∂ltve: {filename}\")\n        except Exception as e:\n            QMessageBox.critical(self, \"El≈ëzm√©ny bet√∂lt√©si hiba\", str(e))\n\n\n    def clear_history(self):\n        \"\"\"El≈ëzm√©nyek t√∂rl√©se\"\"\"\n        reply = QMessageBox.question(self, \"El≈ëzm√©nyek t√∂rl√©se\",\n                                    \"Biztosan t√∂rl√∂d az √∂sszes el≈ëzm√©nyt?\",\n                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)\n        if reply == QMessageBox.Yes:\n            try:\n                for f in os.listdir(self.settings.history_dir):\n                    p = os.path.join(self.settings.history_dir, f)\n                    if os.path.isfile(p):\n                        os.unlink(p)\n                self.history = []\n                self.update_history_menu()\n                QMessageBox.information(self, \"T√∂rl√©s\", \"Az √∂sszes el≈ëzm√©ny t√∂r√∂lve.\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Hiba\", str(e))\n\n\n    def load_api_keys(self):\n        \"\"\"API kulcsok bet√∂lt√©se\"\"\"\n        data = self.settings.get('api_keys', {})\n        self.key_combo.clear()\n        for name, enc in data.items():\n            try:\n                dec = self.encryption_manager.decrypt(enc)\n                if dec:\n                    self.key_combo.addItem(name, dec)\n            except Exception:\n                pass\n        if self.key_combo.count():\n            self.key_combo.setCurrentIndex(0)\n\n\n    def add_api_key(self):\n        \"\"\"√öj API kulcs hozz√°ad√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"√öj API kulcs\")\n        l = QFormLayout(dlg)\n        name_edit = QLineEdit()\n        key_edit = QLineEdit()\n        l.addRow(\"N√©v:\", name_edit)\n        l.addRow(\"Kulcs:\", key_edit)\n        btn = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        btn.accepted.connect(dlg.accept)\n        btn.rejected.connect(dlg.reject)\n        l.addRow(btn)\n        if dlg.exec_() == QDialog.Accepted:\n            name = name_edit.text().strip()\n            key = key_edit.text().strip()\n            if name and key:\n                data = self.settings.get('api_keys', {})\n                data[name] = self.encryption_manager.encrypt(key)\n                self.settings.set('api_keys', data)\n                self.load_api_keys()\n                self.key_combo.setCurrentText(name)\n\n\n    def refresh_models(self):\n        \"\"\"Modellek friss√≠t√©se\"\"\"\n        try:\n            self.network_manager.models_loaded.disconnect(self.populate_models)\n        except TypeError:\n            pass\n        self.model_combo.clear()\n        self.network_manager.free_only = self.free_check.isChecked()\n        self.network_manager.models_loaded.connect(self.populate_models)\n        self.network_manager.error_occurred.connect(self.show_error)\n        self.network_manager.start()\n\n\n    def populate_models(self, models):\n        \"\"\"Modellek bet√∂lt√©se\"\"\"\n        self.model_combo.addItems(models)\n        if self.model_combo.count():\n            last = self.settings.get('last_model')\n            if last and last in models:\n                self.model_combo.setCurrentIndex(models.index(last))\n            else:\n                self.model_combo.setCurrentIndex(0)\n\n\n    def upload_file(self):\n        \"\"\"F√°jl felt√∂lt√©se\"\"\"\n        fp, _ = QFileDialog.getOpenFileName(self, \"F√°jl felt√∂lt√©s\",\n                                            \"\", \"Minden f√°jl (*);;Sz√∂vegf√°jlok (*.txt);;K√≥d (*.py *.c *.cpp *.java)\",\n                                            options=QFileDialog.Options())\n        if fp:\n            try:\n                with open(fp, 'r', encoding='utf-8') as f:\n                    txt = f.read()\n                if len(txt) > MAX_FILE_SIZE:\n                    QMessageBox.warning(self, \"T√∫l nagy f√°jl\",\n                                        f\"F√°jl m√©rete ({len(txt)} karakter) meghaladja a {MAX_FILE_SIZE} karaktert.\")\n                    return\n                self.input_edit.setPlainText(\n                    f\"A k√∂vetkez≈ë k√≥d van felt√∂ltve:\\n```plaintext\\n{txt}\\n```\\n\\nK√©r√©s:\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Hiba\", f\"F√°jl olvas√°si hiba: {e}\")\n\n\n    def send_request(self):\n        \"\"\"K√©r√©s k√ºld√©se\"\"\"\n        self.start_request(False)\n\n\n    def continue_request(self):\n        \"\"\"K√©r√©s folytat√°sa\"\"\"\n        self.start_request(True)\n\n\n    def start_request(self, continue_conv: bool):\n        \"\"\"K√©r√©s kezdem√©nyez√©se\"\"\"\n        self.current_prompt = self.input_edit.toPlainText().strip()\n        if not self.current_prompt and not continue_conv:\n            QMessageBox.warning(self, \"√úres k√©r√©s\", \"K√©rlek, √≠rj be egy k√©rd√©st!\")\n            return\n        api_key = self.key_combo.currentData()\n        if not api_key:\n            QMessageBox.warning(self, \"Hi√°nyz√≥ API kulcs\", \"K√©rlek, add meg az API kulcsot!\")\n            return\n        model = self.model_combo.currentText()\n        if not model:\n            QMessageBox.warning(self, \"Hi√°nyz√≥ modell\", \"K√©rlek, v√°lassz egy modellt!\")\n            return\n\n\n        self.set_ui_state(False)\n        self.is_generating = True\n        if not continue_conv:\n            self.history.append({\"role\": \"user\", \"content\": self.current_prompt})\n            self.append_to_chat(f\"**Felhaszn√°l√≥:** {self.current_prompt}\\n\\n\", role=\"user\")\n        else:\n            last_resp = self.history[-1][\"content\"] if self.history and self.history[-1][\"role\"] == \"assistant\" else \"\"\n            self.history.append({\n                \"role\": \"user\",\n                \"content\": f\"A v√°lasz eddig √≠gy sz√≥lt:\\n\\n{last_resp}\\n\\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!\"\n            })\n\n\n        self.status_bar.showMessage(\"K√©r√©s folyamatban‚Ä¶\")\n        self.start_worker(api_key, model)\n        self.set_generating_background(True)\n\n\n    def set_ui_state(self, enabled: bool):\n        \"\"\"Fel√ºlet √°llapot√°nak be√°ll√≠t√°s\"\"\"\n        self.send_btn.setEnabled(enabled)\n        self.cont_btn.setEnabled(enabled)\n        self.upload_btn.setEnabled(enabled)\n        self.input_edit.setEnabled(enabled)\n\n\n    def start_worker(self, api_key, model):\n        \"\"\"Munkamenet ind√≠t√°sa\"\"\"\n        self.worker = AIWorker(\n            api_key,\n            self.history,\n            model,\n            self.temp_spin.value(),\n            self.token_combo.currentData()\n        )\n        self.worker.update_received.connect(self.handle_update)\n        self.worker.response_completed.connect(self.request_completed)\n        self.worker.error_occurred.connect(self.show_error)\n        self.worker.truncated.connect(self.show_truncated_message)\n        self.worker.start()\n\n\n    def handle_update(self, text: str):\n        \"\"\"V√°laszkezel√©s\"\"\"\n        self.buffered_text += text\n        if not self.update_timer.isActive():\n            self.update_timer.start(self.update_interval)\n\n\n    def flush_buffer(self):\n        \"\"\"Pufferv√°lasz ki√ºr√≠t√©se\"\"\"\n        if self.buffered_text:\n            self.text_receiver.update_text.emit(self.buffered_text)\n            self.buffered_text = \"\"\n        if self.worker and (not self.worker.isRunning() or not self.is_generating):\n            self.update_timer.stop()\n\n\n    def append_to_chat(self, text: str, role: str = None):\n        \"\"\"Sz√∂veg hozz√°ad√°sa a chathez\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.movePosition(QTextCursor.End)\n        fmt = QTextCharFormat()\n        if role == \"user\":\n            fmt.setForeground(QColor(\"#3498db\"))\n        elif self.is_generating:\n            fmt.setForeground(QColor(\"#2ecc71\"))\n        cursor.insertText(text, fmt)\n        self.chat_display.ensureCursorVisible()\n        self.process_code_blocks()\n\n\n    def request_completed(self, status: str):\n        \"\"\"K√©r√©s befejez√©se\"\"\"\n        if self.buffered_text:\n            self.text_receiver.update_text.emit(self.buffered_text)\n            self.buffered_text = \"\"\n        assistant_text = self.chat_display.toPlainText().split(\"Felhaszn√°l√≥:\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!"
  },
  {
    "role": "user",
    "content": "import sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(2, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn.setEnabled(False)\n\n\n        right_layout.addWidget(self.tab_widget, 1)\n        btn_layout_right = QHBoxLayout()\n        btn_layout_right.addWidget(self.copy_btn)\n        btn_layout_right.addStretch(1)\n        right_layout.addLayout(btn_layout_right)\n\n\n        self.status_bar = QStatusBar()\n        right_layout.addWidget(self.status_bar)\n\n\n        splitter.addWidget(self.right_panel)\n        splitter.setSizes([400, 600])\n\n\n        main_layout.addWidget(splitter, 1)\n        self.setLayout(main_layout)\n\n\n        self.apply_dark_theme()\n\n\n    def create_toolbar(self):\n        \"\"\"Eszk√∂zt√°r l√©trehoz√°sa\"\"\"\n        toolbar = QToolBar()\n        toolbar.setIconSize(QSize(24, 24))\n\n\n        def add_action(icon, text, callback):\n            act = QAction(QIcon.fromTheme(icon), text, self)\n            act.triggered.connect(callback)\n            toolbar.addAction(act)\n\n\n        add_action('document-save', \"Ment√©s\", self.save_chat)\n        add_action('document-open', \"Bet√∂lt√©s\", self.load_chat)\n        add_action('edit-clear', \"T√∂rl√©s\", self.clear_chat_display)\n        add_action('edit-clear', \"El≈ëzm√©nyek t√∂rl√©se\", self.clear_history)\n\n\n        toolbar.addSeparator()\n\n\n        self.history_menu = QMenu(\"El≈ëzm√©nyek\", self)\n        menu_btn = QToolButton()\n        menu_btn.setText(\"El≈ëzm√©nyek\")\n        menu_btn.setMenu(self.history_menu)\n        menu_btn.setPopupMode(QToolButton.InstantPopup)\n        toolbar.addWidget(menu_btn)\n\n\n        key_menu = QMenu(\"Kulcsok\", self)\n        add_action = QAction(\"√öj kulcs hozz√°ad√°sa\", self)\n        add_action.triggered.connect(self.add_api_key)\n        key_menu.addAction(add_action)\n        toolbar.addAction(key_menu.menuAction())\n\n\n        self.update_history_menu()\n        return toolbar\n\n\n    def setup_connections(self):\n        \"\"\"Kapcsolatok l√©trehoz√°sa\"\"\"\n        self.send_btn.clicked.connect(self.send_request)\n        self.cont_btn.clicked.connect(self.continue_request)\n        self.upload_btn.clicked.connect(self.upload_file)\n        self.free_check.stateChanged.connect(self.refresh_models)\n        self.tab_widget.currentChanged.connect(self.update_copy_button_state)\n\n\n        self.refresh_models()\n        self.load_api_keys()\n\n\n        QShortcut(QKeySequence(\"Ctrl+Return\"), self).activated.connect(self.send_request)\n        QShortcut(QKeySequence(\"Ctrl+Shift+Return\"), self).activated.connect(self.continue_request)\n        QShortcut(QKeySequence(\"Ctrl+F\"), self).activated.connect(self.show_search_dialog)\n\n\n    def show_search_dialog(self):\n        \"\"\"Keres√©s dial√≥gus megjelen√≠t√©se\"\"\"\n        self.search_dialog = SearchDialog(self)\n        self.search_dialog.show()\n\n\n    def update_copy_button_state(self, index):\n        \"\"\"M√°sol√°s gomb √°llapot√°nak friss√≠t√©se\"\"\"\n        self.copy_btn.setEnabled(index > 0)\n\n\n    def apply_dark_theme(self):\n        \"\"\"S√∂t√©t t√©ma alkalmaz√°sa\"\"\"\n        palette = QPalette()\n        palette.setColor(QPalette.Window, QColor(\"#2c3e50\"))\n        palette.setColor(QPalette.WindowText, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Base, QColor(\"#34495e\"))\n        palette.setColor(QPalette.AlternateBase, QColor(\"#2c3e50\"))\n        palette.setColor(QPalette.ToolTipBase, QColor(\"#34495e\"))\n        palette.setColor(QPalette.ToolTipText, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Text, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Button, QColor(\"#3498db\"))\n        palette.setColor(QPalette.ButtonText, QColor(\"#ffffff\"))\n        palette.setColor(QPalette.Highlight, QColor(\"#3498db\"))\n        palette.setColor(QPalette.HighlightedText, QColor(\"#ffffff\"))\n\n\n        app.setStyle(\"Fusion\")\n        self.setPalette(palette)\n        self.setStyleSheet(\"\"\"\n            QWidget { background-color:#2c3e50; color:#ecf0f1; font-family:\"Segoe UI\"; font-size:14px; }\n            QTextEdit, QPlainTextEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:12px; }\n            QComboBox, QDoubleSpinBox, QSpinBox, QLineEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:8px; }\n            QPushButton { background:#3498db; color:white; padding:10px 20px; border-radius:8px; border:none; font-weight:bold; }\n            QPushButton:hover { background:#2980b9; }\n            QPushButton:pressed { background:#2471a3; }\n            QPushButton:disabled { background:#7f8c8d; color:#bdc3c7; }\n            QStatusBar { color:#95a5a6; font-size:12px; background:#232f34; border-top:1px solid #2c3e50; }\n            QTabWidget::pane { border:1px solid #2c3e50; background:#232f34; border-radius:8px; }\n            QTabBar::tab { background:#34495e; color:#ecf0f1; padding:8px 16px; border-top-left-radius:8px; border-top-right-radius:8px; }\n            QTabBar::tab:selected { background:#2c3e50; }\n            QGroupBox { border:1px solid #2c3e50; border-radius:8px; margin-top:1em; padding:10px; }\n            QGroupBox::title { left:10px; padding:0 3px; color:#ecf0f1; }\n            QToolBar { background:#232f34; padding:5px; }\n            QToolButton { background:transparent; border:none; padding:5px; color:#ecf0f1; }\n            QToolButton:hover { background:#34495e; border-radius:4px; }\n            QMenu { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:4px; }\n            QMenu::item { padding:8px 20px; }\n            QMenu::item:selected { background:#3498db; }\n            QScrollBar:vertical { background:#232f34; width:10px; }\n            QScrollBar::handle:vertical { background:#3498db; min-height:20px; border-radius:5px; }\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height:0px; }\n        \"\"\")\n\n\n    def load_settings(self):\n        \"\"\"Be√°ll√≠t√°sok bet√∂lt√©se\"\"\"\n        try:\n            size = self.settings.get('window_size', '1000x700')\n            w, h = map(int, size.split('x'))\n            self.resize(w, h)\n        except Exception:\n            self.resize(1000, 700)\n\n\n        self.move(QApplication.desktop().screenGeometry().center() - self.frameGeometry().center())\n        self.temp_spin.setValue(float(self.settings.get('temperature', DEFAULT_TEMP)))\n        tokens = int(self.settings.get('max_tokens', 4096))\n        idx = next((i for i, t in enumerate(TOKEN_OPTIONS) if t == tokens), DEFAULT_TOKENS_INDEX)\n        self.token_combo.setCurrentIndex(idx)\n        self.free_check.setChecked(self.settings.get('free_models', 'true') == 'true')\n\n\n    def save_settings(self):\n        \"\"\"Be√°ll√≠t√°sok ment√©se\"\"\"\n        self.settings.set('window_size', f\"{self.width()}x{self.height()}\")\n        self.settings.set('temperature', self.temp_spin.value())\n        self.settings.set('max_tokens', self.token_combo.currentData())\n        self.settings.set('free_models', self.free_check.isChecked())\n\n\n    def closeEvent(self, event):\n        \"\"\"Ablak bez√°r√°sakor\"\"\"\n        self.autosave_history()\n        self.save_settings()\n        if self.worker and self.worker.isRunning():\n            self.worker.stop()\n            self.worker.wait()\n        gc.collect()\n        super().closeEvent(event)\n\n\n    def autosave_history(self):\n        \"\"\"Automatikus el≈ëzm√©nyek ment√©se\"\"\"\n        if not self.history:\n            return\n        ts = time.strftime(\"%Y%m%d-%H%M%S\")\n        fn = os.path.join(self.settings.history_dir, f\"autosave_{ts}.json\")\n        try:\n            with open(fn, 'w', encoding='utf-8') as f:\n                json.dump(self.history, f, ensure_ascii=False, indent=2)\n        except Exception:\n            pass\n\n\n    def update_history_menu(self):\n        \"\"\"El≈ëzm√©nyek men√º friss√≠t√©se\"\"\"\n        self.history_menu.clear()\n        files = sorted([f for f in os.listdir(self.settings.history_dir) if f.endswith('.json')])\n        for f in files[-MAX_HISTORY:]:\n            act = self.history_menu.addAction(f)\n            act.triggered.connect(lambda _, fn=f: self.load_history_file(fn))\n        if not files:\n            self.history_menu.addAction(\"Nincs el≈ëzm√©ny\")\n\n\n    def load_history_file(self, filename):\n        \"\"\"El≈ëzm√©ny bet√∂lt√©se\"\"\"\n        path = os.path.join(self.settings.history_dir, filename)\n        try:\n            with open(path, 'r', encoding='utf-8') as f:\n                self.history = json.load(f)\n            self.clear_chat_display()\n            for m in self.history:\n                role = m.get('role', 'user')\n                content = m.get('content', '')\n                self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n            self.process_code_blocks()\n            self.status_bar.showMessage(f\"El≈ëzm√©ny bet√∂ltve: {filename}\")\n        except Exception as e:\n            QMessageBox.critical(self, \"El≈ëzm√©ny bet√∂lt√©si hiba\", str(e))\n\n\n    def clear_history(self):\n        \"\"\"El≈ëzm√©nyek t√∂rl√©se\"\"\"\n        reply = QMessageBox.question(self, \"El≈ëzm√©nyek t√∂rl√©se\",\n                                    \"Biztosan t√∂rl√∂d az √∂sszes el≈ëzm√©nyt?\",\n                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)\n        if reply == QMessageBox.Yes:\n            try:\n                for f in os.listdir(self.settings.history_dir):\n                    p = os.path.join(self.settings.history_dir, f)\n                    if os.path.isfile(p):\n                        os.unlink(p)\n                self.history = []\n                self.update_history_menu()\n                QMessageBox.information(self, \"T√∂rl√©s\", \"Az √∂sszes el≈ëzm√©ny t√∂r√∂lve.\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Hiba\", str(e))\n\n\n    def load_api_keys(self):\n        \"\"\"API kulcsok bet√∂lt√©se\"\"\"\n        data = self.settings.get('api_keys', {})\n        self.key_combo.clear()\n        for name, enc in data.items():\n            try:\n                dec = self.encryption_manager.decrypt(enc)\n                if dec:\n                    self.key_combo.addItem(name, dec)\n            except Exception:\n                pass\n        if self.key_combo.count():\n            self.key_combo.setCurrentIndex(0)\n\n\n    def add_api_key(self):\n        \"\"\"√öj API kulcs hozz√°ad√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"√öj API kulcs\")\n        l = QFormLayout(dlg)\n        name_edit = QLineEdit()\n        key_edit = QLineEdit()\n        l.addRow(\"N√©v:\", name_edit)\n        l.addRow(\"Kulcs:\", key_edit)\n        btn = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        btn.accepted.connect(dlg.accept)\n        btn.rejected.connect(dlg.reject)\n        l.addRow(btn)\n        if dlg.exec_() == QDialog.Accepted:\n            name = name_edit.text().strip()\n            key = key_edit.text().strip()\n            if name and key:\n                data = self.settings.get('api_keys', {})\n                data[name] = self.encryption_manager.encrypt(key)\n                self.settings.set('api_keys', data)\n                self.load_api_keys()\n                self.key_combo.setCurrentText(name)\n\n\n    def refresh_models(self):\n        \"\"\"Modellek friss√≠t√©se\"\"\"\n        try:\n            self.network_manager.models_loaded.disconnect(self.populate_models)\n        except TypeError:\n            pass\n        self.model_combo.clear()\n        self.network_manager.free_only = self.free_check.isChecked()\n        self.network_manager.models_loaded.connect(self.populate_models)\n        self.network_manager.error_occurred.connect(self.show_error)\n        self.network_manager.start()\n\n\n    def populate_models(self, models):\n        \"\"\"Modellek bet√∂lt√©se\"\"\"\n        self.model_combo.addItems(models)\n        if self.model_combo.count():\n            last = self.settings.get('last_model')\n            if last and last in models:\n                self.model_combo.setCurrentIndex(models.index(last))\n            else:\n                self.model_combo.setCurrentIndex(0)\n\n\n    def upload_file(self):\n        \"\"\"F√°jl felt√∂lt√©se\"\"\"\n        fp, _ = QFileDialog.getOpenFileName(self, \"F√°jl felt√∂lt√©s\",\n                                            \"\", \"Minden f√°jl (*);;Sz√∂vegf√°jlok (*.txt);;K√≥d (*.py *.c *.cpp *.java)\",\n                                            options=QFileDialog.Options())\n        if fp:\n            try:\n                with open(fp, 'r', encoding='utf-8') as f:\n                    txt = f.read()\n                if len(txt) > MAX_FILE_SIZE:\n                    QMessageBox.warning(self, \"T√∫l nagy f√°jl\",\n                                        f\"F√°jl m√©rete ({len(txt)} karakter) meghaladja a {MAX_FILE_SIZE} karaktert.\")\n                    return\n                self.input_edit.setPlainText(\n                    f\"A k√∂vetkez≈ë k√≥d van felt√∂ltve:\\n```plaintext\\n{txt}\\n```\\n\\nK√©r√©s:\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Hiba\", f\"F√°jl olvas√°si hiba: {e}\")\n\n\n    def send_request(self):\n        \"\"\"K√©r√©s k√ºld√©se\"\"\"\n        self.start_request(False)\n\n\n    def continue_request(self):\n        \"\"\"K√©r√©s folytat√°sa\"\"\"\n        self.start_request(True)\n\n\n    def start_request(self, continue_conv: bool):\n        \"\"\"K√©r√©s kezdem√©nyez√©se\"\"\"\n        self.current_prompt = self.input_edit.toPlainText().strip()\n        if not self.current_prompt and not continue_conv:\n            QMessageBox.warning(self, \"√úres k√©r√©s\", \"K√©rlek, √≠rj be egy k√©rd√©st!\")\n            return\n        api_key = self.key_combo.currentData()\n        if not api_key:\n            QMessageBox.warning(self, \"Hi√°nyz√≥ API kulcs\", \"K√©rlek, add meg az API kulcsot!\")\n            return\n        model = self.model_combo.currentText()\n        if not model:\n            QMessageBox.warning(self, \"Hi√°nyz√≥ modell\", \"K√©rlek, v√°lassz egy modellt!\")\n            return\n\n\n        self.set_ui_state(False)\n        self.is_generating = True\n        if not continue_conv:\n            self.history.append({\"role\": \"user\", \"content\": self.current_prompt})\n            self.append_to_chat(f\"**Felhaszn√°l√≥:** {self.current_prompt}\\n\\n\", role=\"user\")\n        else:\n            last_resp = self.history[-1][\"content\"] if self.history and self.history[-1][\"role\"] == \"assistant\" else \"\"\n            self.history.append({\n                \"role\": \"user\",\n                \"content\": f\"A v√°lasz eddig √≠gy sz√≥lt:\\n\\n{last_resp}\\n\\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!\"\n            })\n\n\n        self.status_bar.showMessage(\"K√©r√©s folyamatban‚Ä¶\")\n        self.start_worker(api_key, model)\n        self.set_generating_background(True)\n\n\n    def set_ui_state(self, enabled: bool):\n        \"\"\"Fel√ºlet √°llapot√°nak be√°ll√≠t√°s\"\"\"\n        self.send_btn.setEnabled(enabled)\n        self.cont_btn.setEnabled(enabled)\n        self.upload_btn.setEnabled(enabled)\n        self.input_edit.setEnabled(enabled)\n\n\n    def start_worker(self, api_key, model):\n        \"\"\"Munkamenet ind√≠t√°sa\"\"\"\n        self.worker = AIWorker(\n            api_key,\n            self.history,\n            model,\n            self.temp_spin.value(),\n            self.token_combo.currentData()\n        )\n        self.worker.update_received.connect(self.handle_update)\n        self.worker.response_completed.connect(self.request_completed)\n        self.worker.error_occurred.connect(self.show_error)\n        self.worker.truncated.connect(self.show_truncated_message)\n        self.worker.start()\n\n\n    def handle_update(self, text: str):\n        \"\"\"V√°laszkezel√©s\"\"\"\n        self.buffered_text += text\n        if not self.update_timer.isActive():\n            self.update_timer.start(self.update_interval)\n\n\n    def flush_buffer(self):\n        \"\"\"Pufferv√°lasz ki√ºr√≠t√©se\"\"\"\n        if self.buffered_text:\n            self.text_receiver.update_text.emit(self.buffered_text)\n            self.buffered_text = \"\"\n        if self.worker and (not self.worker.isRunning() or not self.is_generating):\n            self.update_timer.stop()\n\n\n    def append_to_chat(self, text: str, role: str = None):\n        \"\"\"Sz√∂veg hozz√°ad√°sa a chathez\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.movePosition(QTextCursor.End)\n        fmt = QTextCharFormat()\n        if role == \"user\":\n            fmt.setForeground(QColor(\"#3498db\"))\n        elif self.is_generating:\n            fmt.setForeground(QColor(\"#2ecc71\"))\n        cursor.insertText(text, fmt)\n        self.chat_display.ensureCursorVisible()\n        self.process_code_blocks()\n\n\n    def request_completed(self, status: str):\n        \"\"\"K√©r√©s befejez√©se\"\"\"\n        if self.buffered_text:\n            self.text_receiver.update_text.emit(self.buffered_text)\n            self.buffered_text = \"\"\n        assistant_text = self.chat_display.toPlainText().split(\"Felhaszn√°l√≥:\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!"
  },
  {
    "role": "user",
    "content": "A v√°lasz eddig √≠gy sz√≥lt:\n\n\n\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!"
  },
  {
    "role": "user",
    "content": "import sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(2, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn.setEnabled(False)\n\n\n        right_layout.addWidget(self.tab_widget, 1)\n        btn_layout_right = QHBoxLayout()\n        btn_layout_right.addWidget(self.copy_btn)\n        btn_layout_right.addStretch(1)\n        right_layout.addLayout(btn_layout_right)\n\n\n        self.status_bar = QStatusBar()\n        right_layout.addWidget(self.status_bar)\n\n\n        splitter.addWidget(self.right_panel)\n        splitter.setSizes([400, 600])\n\n\n        main_layout.addWidget(splitter, 1)\n        self.setLayout(main_layout)\n\n\n        self.apply_dark_theme()\n\n\n    def create_toolbar(self):\n        \"\"\"Eszk√∂zt√°r l√©trehoz√°sa\"\"\"\n        toolbar = QToolBar()\n        toolbar.setIconSize(QSize(24, 24))\n\n\n        def add_action(icon, text, callback):\n            act = QAction(QIcon.fromTheme(icon), text, self)\n            act.triggered.connect(callback)\n            toolbar.addAction(act)\n\n\n        add_action('document-save', \"Ment√©s\", self.save_chat)\n        add_action('document-open', \"Bet√∂lt√©s\", self.load_chat)\n        add_action('edit-clear', \"T√∂rl√©s\", self.clear_chat_display)\n        add_action('edit-clear', \"El≈ëzm√©nyek t√∂rl√©se\", self.clear_history)\n\n\n        toolbar.addSeparator()\n\n\n        self.history_menu = QMenu(\"El≈ëzm√©nyek\", self)\n        menu_btn = QToolButton()\n        menu_btn.setText(\"El≈ëzm√©nyek\")\n        menu_btn.setMenu(self.history_menu)\n        menu_btn.setPopupMode(QToolButton.InstantPopup)\n        toolbar.addWidget(menu_btn)\n\n\n        key_menu = QMenu(\"Kulcsok\", self)\n        add_action = QAction(\"√öj kulcs hozz√°ad√°sa\", self)\n        add_action.triggered.connect(self.add_api_key)\n        key_menu.addAction(add_action)\n        toolbar.addAction(key_menu.menuAction())\n\n\n        self.update_history_menu()\n        return toolbar\n\n\n    def setup_connections(self):\n        \"\"\"Kapcsolatok l√©trehoz√°sa\"\"\"\n        self.send_btn.clicked.connect(self.send_request)\n        self.cont_btn.clicked.connect(self.continue_request)\n        self.upload_btn.clicked.connect(self.upload_file)\n        self.free_check.stateChanged.connect(self.refresh_models)\n        self.tab_widget.currentChanged.connect(self.update_copy_button_state)\n\n\n        self.refresh_models()\n        self.load_api_keys()\n\n\n        QShortcut(QKeySequence(\"Ctrl+Return\"), self).activated.connect(self.send_request)\n        QShortcut(QKeySequence(\"Ctrl+Shift+Return\"), self).activated.connect(self.continue_request)\n        QShortcut(QKeySequence(\"Ctrl+F\"), self).activated.connect(self.show_search_dialog)\n\n\n    def show_search_dialog(self):\n        \"\"\"Keres√©s dial√≥gus megjelen√≠t√©se\"\"\"\n        self.search_dialog = SearchDialog(self)\n        self.search_dialog.show()\n\n\n    def update_copy_button_state(self, index):\n        \"\"\"M√°sol√°s gomb √°llapot√°nak friss√≠t√©se\"\"\"\n        self.copy_btn.setEnabled(index > 0)\n\n\n    def apply_dark_theme(self):\n        \"\"\"S√∂t√©t t√©ma alkalmaz√°sa\"\"\"\n        palette = QPalette()\n        palette.setColor(QPalette.Window, QColor(\"#2c3e50\"))\n        palette.setColor(QPalette.WindowText, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Base, QColor(\"#34495e\"))\n        palette.setColor(QPalette.AlternateBase, QColor(\"#2c3e50\"))\n        palette.setColor(QPalette.ToolTipBase, QColor(\"#34495e\"))\n        palette.setColor(QPalette.ToolTipText, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Text, QColor(\"#ecf0f1\"))\n        palette.setColor(QPalette.Button, QColor(\"#3498db\"))\n        palette.setColor(QPalette.ButtonText, QColor(\"#ffffff\"))\n        palette.setColor(QPalette.Highlight, QColor(\"#3498db\"))\n        palette.setColor(QPalette.HighlightedText, QColor(\"#ffffff\"))\n\n\n        app.setStyle(\"Fusion\")\n        self.setPalette(palette)\n        self.setStyleSheet(\"\"\"\n            QWidget { background-color:#2c3e50; color:#ecf0f1; font-family:\"Segoe UI\"; font-size:14px; }\n            QTextEdit, QPlainTextEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:12px; }\n            QComboBox, QDoubleSpinBox, QSpinBox, QLineEdit { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:8px; padding:8px; }\n            QPushButton { background:#3498db; color:white; padding:10px 20px; border-radius:8px; border:none; font-weight:bold; }\n            QPushButton:hover { background:#2980b9; }\n            QPushButton:pressed { background:#2471a3; }\n            QPushButton:disabled { background:#7f8c8d; color:#bdc3c7; }\n            QStatusBar { color:#95a5a6; font-size:12px; background:#232f34; border-top:1px solid #2c3e50; }\n            QTabWidget::pane { border:1px solid #2c3e50; background:#232f34; border-radius:8px; }\n            QTabBar::tab { background:#34495e; color:#ecf0f1; padding:8px 16px; border-top-left-radius:8px; border-top-right-radius:8px; }\n            QTabBar::tab:selected { background:#2c3e50; }\n            QGroupBox { border:1px solid #2c3e50; border-radius:8px; margin-top:1em; padding:10px; }\n            QGroupBox::title { left:10px; padding:0 3px; color:#ecf0f1; }\n            QToolBar { background:#232f34; padding:5px; }\n            QToolButton { background:transparent; border:none; padding:5px; color:#ecf0f1; }\n            QToolButton:hover { background:#34495e; border-radius:4px; }\n            QMenu { background:#34495e; color:#ecf0f1; border:1px solid #2c3e50; border-radius:4px; }\n            QMenu::item { padding:8px 20px; }\n            QMenu::item:selected { background:#3498db; }\n            QScrollBar:vertical { background:#232f34; width:10px; }\n            QScrollBar::handle:vertical { background:#3498db; min-height:20px; border-radius:5px; }\n            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height:0px; }\n        \"\"\")\n\n\n    def load_settings(self):\n        \"\"\"Be√°ll√≠t√°sok bet√∂lt√©se\"\"\"\n        try:\n            size = self.settings.get('window_size', '1000x700')\n            w, h = map(int, size.split('x'))\n            self.resize(w, h)\n        except Exception:\n            self.resize(1000, 700)\n\n\n        self.move(QApplication.desktop().screenGeometry().center() - self.frameGeometry().center())\n        self.temp_spin.setValue(float(self.settings.get('temperature', DEFAULT_TEMP)))\n        tokens = int(self.settings.get('max_tokens', 4096))\n        idx = next((i for i, t in enumerate(TOKEN_OPTIONS) if t == tokens), DEFAULT_TOKENS_INDEX)\n        self.token_combo.setCurrentIndex(idx)\n        self.free_check.setChecked(self.settings.get('free_models', 'true') == 'true')\n\n\n    def save_settings(self):\n        \"\"\"Be√°ll√≠t√°sok ment√©se\"\"\"\n        self.settings.set('window_size', f\"{self.width()}x{self.height()}\")\n        self.settings.set('temperature', self.temp_spin.value())\n        self.settings.set('max_tokens', self.token_combo.currentData())\n        self.settings.set('free_models', self.free_check.isChecked())\n\n\n    def closeEvent(self, event):\n        \"\"\"Ablak bez√°r√°sakor\"\"\"\n        self.autosave_history()\n        self.save_settings()\n        if self.worker and self.worker.isRunning():\n            self.worker.stop()\n            self.worker.wait()\n        gc.collect()\n        super().closeEvent(event)\n\n\n    def autosave_history(self):\n        \"\"\"Automatikus el≈ëzm√©nyek ment√©se\"\"\"\n        if not self.history:\n            return\n        ts = time.strftime(\"%Y%m%d-%H%M%S\")\n        fn = os.path.join(self.settings.history_dir, f\"autosave_{ts}.json\")\n        try:\n            with open(fn, 'w', encoding='utf-8') as f:\n                json.dump(self.history, f, ensure_ascii=False, indent=2)\n        except Exception:\n            pass\n\n\n    def update_history_menu(self):\n        \"\"\"El≈ëzm√©nyek men√º friss√≠t√©se\"\"\"\n        self.history_menu.clear()\n        files = sorted([f for f in os.listdir(self.settings.history_dir) if f.endswith('.json')])\n        for f in files[-MAX_HISTORY:]:\n            act = self.history_menu.addAction(f)\n            act.triggered.connect(lambda _, fn=f: self.load_history_file(fn))\n        if not files:\n            self.history_menu.addAction(\"Nincs el≈ëzm√©ny\")\n\n\n    def load_history_file(self, filename):\n        \"\"\"El≈ëzm√©ny bet√∂lt√©se\"\"\"\n        path = os.path.join(self.settings.history_dir, filename)\n        try:\n            with open(path, 'r', encoding='utf-8') as f:\n                self.history = json.load(f)\n            self.clear_chat_display()\n            for m in self.history:\n                role = m.get('role', 'user')\n                content = m.get('content', '')\n                self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n            self.process_code_blocks()\n            self.status_bar.showMessage(f\"El≈ëzm√©ny bet√∂ltve: {filename}\")\n        except Exception as e:\n            QMessageBox.critical(self, \"El≈ëzm√©ny bet√∂lt√©si hiba\", str(e))\n\n\n    def clear_history(self):\n        \"\"\"El≈ëzm√©nyek t√∂rl√©se\"\"\"\n        reply = QMessageBox.question(self, \"El≈ëzm√©nyek t√∂rl√©se\",\n                                    \"Biztosan t√∂rl√∂d az √∂sszes el≈ëzm√©nyt?\",\n                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)\n        if reply == QMessageBox.Yes:\n            try:\n                for f in os.listdir(self.settings.history_dir):\n                    p = os.path.join(self.settings.history_dir, f)\n                    if os.path.isfile(p):\n                        os.unlink(p)\n                self.history = []\n                self.update_history_menu()\n                QMessageBox.information(self, \"T√∂rl√©s\", \"Az √∂sszes el≈ëzm√©ny t√∂r√∂lve.\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Hiba\", str(e))\n\n\n    def load_api_keys(self):\n        \"\"\"API kulcsok bet√∂lt√©se\"\"\"\n        data = self.settings.get('api_keys', {})\n        self.key_combo.clear()\n        for name, enc in data.items():\n            try:\n                dec = self.encryption_manager.decrypt(enc)\n                if dec:\n                    self.key_combo.addItem(name, dec)\n            except Exception:\n                pass\n        if self.key_combo.count():\n            self.key_combo.setCurrentIndex(0)\n\n\n    def add_api_key(self):\n        \"\"\"√öj API kulcs hozz√°ad√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"√öj API kulcs\")\n        l = QFormLayout(dlg)\n        name_edit = QLineEdit()\n        key_edit = QLineEdit()\n        l.addRow(\"N√©v:\", name_edit)\n        l.addRow(\"Kulcs:\", key_edit)\n        btn = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        btn.accepted.connect(dlg.accept)\n        btn.rejected.connect(dlg.reject)\n        l.addRow(btn)\n        if dlg.exec_() == QDialog.Accepted:\n            name = name_edit.text().strip()\n            key = key_edit.text().strip()\n            if name and key:\n                data = self.settings.get('api_keys', {})\n                data[name] = self.encryption_manager.encrypt(key)\n                self.settings.set('api_keys', data)\n                self.load_api_keys()\n                self.key_combo.setCurrentText(name)\n\n\n    def refresh_models(self):\n        \"\"\"Modellek friss√≠t√©se\"\"\"\n        try:\n            self.network_manager.models_loaded.disconnect(self.populate_models)\n        except TypeError:\n            pass\n        self.model_combo.clear()\n        self.network_manager.free_only = self.free_check.isChecked()\n        self.network_manager.models_loaded.connect(self.populate_models)\n        self.network_manager.error_occurred.connect(self.show_error)\n        self.network_manager.start()\n\n\n    def populate_models(self, models):\n        \"\"\"Modellek bet√∂lt√©se\"\"\"\n        self.model_combo.addItems(models)\n        if self.model_combo.count():\n            last = self.settings.get('last_model')\n            if last and last in models:\n                self.model_combo.setCurrentIndex(models.index(last))\n            else:\n                self.model_combo.setCurrentIndex(0)\n\n\n    def upload_file(self):\n        \"\"\"F√°jl felt√∂lt√©se\"\"\"\n        fp, _ = QFileDialog.getOpenFileName(self, \"F√°jl felt√∂lt√©s\",\n                                            \"\", \"Minden f√°jl (*);;Sz√∂vegf√°jlok (*.txt);;K√≥d (*.py *.c *.cpp *.java)\",\n                                            options=QFileDialog.Options())\n        if fp:\n            try:\n                with open(fp, 'r', encoding='utf-8') as f:\n                    txt = f.read()\n                if len(txt) > MAX_FILE_SIZE:\n                    QMessageBox.warning(self, \"T√∫l nagy f√°jl\",\n                                        f\"F√°jl m√©rete ({len(txt)} karakter) meghaladja a {MAX_FILE_SIZE} karaktert.\")\n                    return\n                self.input_edit.setPlainText(\n                    f\"A k√∂vetkez≈ë k√≥d van felt√∂ltve:\\n```plaintext\\n{txt}\\n```\\n\\nK√©r√©s:\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Hiba\", f\"F√°jl olvas√°si hiba: {e}\")\n\n\n    def send_request(self):\n        \"\"\"K√©r√©s k√ºld√©se\"\"\"\n        self.start_request(False)\n\n\n    def continue_request(self):\n        \"\"\"K√©r√©s folytat√°sa\"\"\"\n        self.start_request(True)\n\n\n    def start_request(self, continue_conv: bool):\n        \"\"\"K√©r√©s kezdem√©nyez√©se\"\"\"\n        self.current_prompt = self.input_edit.toPlainText().strip()\n        if not self.current_prompt and not continue_conv:\n            QMessageBox.warning(self, \"√úres k√©r√©s\", \"K√©rlek, √≠rj be egy k√©rd√©st!\")\n            return\n        api_key = self.key_combo.currentData()\n        if not api_key:\n            QMessageBox.warning(self, \"Hi√°nyz√≥ API kulcs\", \"K√©rlek, add meg az API kulcsot!\")\n            return\n        model = self.model_combo.currentText()\n        if not model:\n            QMessageBox.warning(self, \"Hi√°nyz√≥ modell\", \"K√©rlek, v√°lassz egy modellt!\")\n            return\n\n\n        self.set_ui_state(False)\n        self.is_generating = True\n        if not continue_conv:\n            self.history.append({\"role\": \"user\", \"content\": self.current_prompt})\n            self.append_to_chat(f\"**Felhaszn√°l√≥:** {self.current_prompt}\\n\\n\", role=\"user\")\n        else:\n            last_resp = self.history[-1][\"content\"] if self.history and self.history[-1][\"role\"] == \"assistant\" else \"\"\n            self.history.append({\n                \"role\": \"user\",\n                \"content\": f\"A v√°lasz eddig √≠gy sz√≥lt:\\n\\n{last_resp}\\n\\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!\"\n            })\n\n\n        self.status_bar.showMessage(\"K√©r√©s folyamatban‚Ä¶\")\n        self.start_worker(api_key, model)\n        self.set_generating_background(True)\n\n\n    def set_ui_state(self, enabled: bool):\n        \"\"\"Fel√ºlet √°llapot√°nak be√°ll√≠t√°s\"\"\"\n        self.send_btn.setEnabled(enabled)\n        self.cont_btn.setEnabled(enabled)\n        self.upload_btn.setEnabled(enabled)\n        self.input_edit.setEnabled(enabled)\n\n\n    def start_worker(self, api_key, model):\n        \"\"\"Munkamenet ind√≠t√°sa\"\"\"\n        self.worker = AIWorker(\n            api_key,\n            self.history,\n            model,\n            self.temp_spin.value(),\n            self.token_combo.currentData()\n        )\n        self.worker.update_received.connect(self.handle_update)\n        self.worker.response_completed.connect(self.request_completed)\n        self.worker.error_occurred.connect(self.show_error)\n        self.worker.truncated.connect(self.show_truncated_message)\n        self.worker.start()\n\n\n    def handle_update(self, text: str):\n        \"\"\"V√°laszkezel√©s\"\"\"\n        self.buffered_text += text\n        if not self.update_timer.isActive():\n            self.update_timer.start(self.update_interval)\n\n\n    def flush_buffer(self):\n        \"\"\"Pufferv√°lasz ki√ºr√≠t√©se\"\"\"\n        if self.buffered_text:\n            self.text_receiver.update_text.emit(self.buffered_text)\n            self.buffered_text = \"\"\n        if self.worker and (not self.worker.isRunning() or not self.is_generating):\n            self.update_timer.stop()\n\n\n    def append_to_chat(self, text: str, role: str = None):\n        \"\"\"Sz√∂veg hozz√°ad√°sa a chathez\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.movePosition(QTextCursor.End)\n        fmt = QTextCharFormat()\n        if role == \"user\":\n            fmt.setForeground(QColor(\"#3498db\"))\n        elif self.is_generating:\n            fmt.setForeground(QColor(\"#2ecc71\"))\n        cursor.insertText(text, fmt)\n        self.chat_display.ensureCursorVisible()\n        self.process_code_blocks()\n\n\n    def request_completed(self, status: str):\n        \"\"\"K√©r√©s befejez√©se\"\"\"\n        if self.buffered_text:\n            self.text_receiver.update_text.emit(self.buffered_text)\n            self.buffered_text = \"\"\n        assistant_text = self.chat_display.toPlainText().split(\"Felhaszn√°l√≥:\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!"
  },
  {
    "role": "assistant",
    "content": "\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val√≥s√≠tja meg:\n\n```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn"
  },
  {
    "role": "user",
    "content": "A v√°lasz eddig √≠gy sz√≥lt:\n\n\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val√≥s√≠tja meg:\n\n```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn\n\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!"
  },
  {
    "role": "assistant",
    "content": "\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val√≥s√≠tja meg:\n\n```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn.setEnabled(False)\n\n\n        right_layout.addWidget(self.tab_widget, 1)\n        btn_layout_right = QHBoxLayout()\n        btn_layout_right.addWidget(self"
  },
  {
    "role": "user",
    "content": "A v√°lasz eddig √≠gy sz√≥lt:\n\n\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val√≥s√≠tja meg:\n\n```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn.setEnabled(False)\n\n\n        right_layout.addWidget(self.tab_widget, 1)\n        btn_layout_right = QHBoxLayout()\n        btn_layout_right.addWidget(self\n\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!"
  },
  {
    "role": "assistant",
    "content": "\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val√≥s√≠tja meg:\n\n```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn.setEnabled(False)\n\n\n        right_layout.addWidget(self.tab_widget, 1)\n        btn_layout_right = QHBoxLayout()\n        btn_layout_right.addWidget(self\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged"
  },
  {
    "role": "user",
    "content": "A v√°lasz eddig √≠gy sz√≥lt:\n\n\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val√≥s√≠tja meg:\n\n```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn```python\nimport sys\nimport os\nimport json\nimport time\nimport platform\nimport re\nimport gc\nimport asyncio\nimport aiohttp\nimport requests\nimport psutil\nfrom typing import List, Dict\nfrom cryptography.fernet import Fernet\nfrom PyQt5.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel,\n    QComboBox, QDoubleSpinBox, QTabWidget, QCheckBox, QSplitter,\n    QMessageBox, QToolBar, QAction, QStatusBar, QFileDialog, QMenu, QToolButton,\n    QLineEdit, QDialog, QDialogButtonBox, QFormLayout, QGroupBox,\n    QShortcut, QPlainTextEdit\n)\nfrom PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize, QTimer, QObject\nfrom PyQt5.QtGui import (\n    QTextCursor, QPalette, QColor, QFont, QIcon, QTextCharFormat,\n    QKeySequence, QTextDocument\n)\n\n\n# Scintilla lexer import\ntry:\n    from PyQt5.Qsci import (QsciScintilla, QsciLexerPython, QsciLexerCPP, QsciLexerJava, QsciLexerJavaScript,\n    QsciLexerHTML,  QsciLexerXML,QsciLexerJSON,QsciLexerBash,\n    QsciLexerSQL)\n    HAS_SCINTILLA = True\nexcept ImportError:\n    HAS_SCINTILLA = False\n\n\n# Alapbe√°ll√≠t√°sok\nAPP_NAME = \"SzitaAIPro\"\nAPI_URL = \"https://openrouter.ai/api/v1/chat/completions\"\nMODEL_URL = \"https://openrouter.ai/api/v1/models?fmt=cards&max_price=0&order=top-weekly\"\nMAX_HISTORY = 15\nMAX_FILE_SIZE = 30000\nTOKEN_OPTIONS = [4096, 8192, 16384, 32768, 65536, 131072]\nDEFAULT_TEMP = 0.4\nDEFAULT_TOKENS_INDEX = 3\n\n\ndef optimize_system():\n    \"\"\"Rendszerr≈ësszerek optimaliz√°l√°sa\"\"\"\n    try:\n        proc = psutil.Process(os.getpid())\n        if platform.system() == \"Windows\":\n            proc.nice(psutil.HIGH_PRIORITY_CLASS)\n        else:\n            proc.nice(-18)\n\n\n        num_threads = str(os.cpu_count() or 4)\n        os.environ[\"OMP_NUM_THREADS\"] = num_threads\n        os.environ[\"OPENBLAS_NUM_THREADS\"] = num_threads\n        os.environ[\"MKL_NUM_THREADS\"] = num_threads\n    except Exception:\n        pass\n\n\noptimize_system()\n\n\nclass SettingsManager:\n    \"\"\"Be√°ll√≠t√°sok kezel√©se\"\"\"\n    def __init__(self):\n        self.config_dir = os.path.join(os.getenv('APPDATA', os.path.expanduser(\"~\")), APP_NAME)\n        os.makedirs(self.config_dir, exist_ok=True)\n        self.settings = QSettings(os.path.join(self.config_dir, 'config.ini'), QSettings.IniFormat)\n\n\n    def get(self, key: str, default=None):\n        return self.settings.value(key, default)\n\n\n    def set(self, key, value):\n        self.settings.setValue(key, value)\n\n\n    @property\n    def history_dir(self):\n        path = os.path.join(self.config_dir, 'history')\n        os.makedirs(path, exist_ok=True)\n        return path\n\n\nsettings = SettingsManager()\n\n\nclass EncryptionManager:\n    \"\"\"Titkos√≠t√°s kezel√©se\"\"\"\n    def __init__(self):\n        key = settings.get('encryption_key')\n        if not key:\n            key = Fernet.generate_key().decode()\n            settings.set('encryption_key', key)\n        self.cipher = Fernet(key.encode())\n\n\n    def encrypt(self, data: str) -> str:\n        return self.cipher.encrypt(data.encode()).decode()\n\n\n    def decrypt(self, data: str) -> str:\n        try:\n            return self.cipher.decrypt(data.encode()).decode()\n        except Exception:\n            return \"\"\n\n\nencryptor = EncryptionManager()\n\n\nclass NetworkManager(QThread):\n    \"\"\"H√°l√≥zati kezel√©s\"\"\"\n    models_loaded = pyqtSignal(list)\n    error_occurred = pyqtSignal(str)\n\n\n    def __init__(self):\n        super().__init__()\n        self.free_only = True\n        self.session = None\n        self.language = \"all\"\n\n\n    async def fetch_models(self):\n        try:\n            async with aiohttp.ClientSession() as session:\n                self.session = session\n                async with session.get(MODEL_URL, timeout=10) as resp:\n                    resp.raise_for_status()\n                    data = await resp.json()\n                    parsed = self.parse_models(data.get('data', []))\n                    self.models_loaded.emit(parsed)\n        except aiohttp.ClientError as e:\n            self.error_occurred.emit(f\"Network error: {e}\")\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\")\n        finally:\n            if self.session:\n                await self.session.close()\n                self.session = None\n\n\n    def run(self):\n        asyncio.run(self.fetch_models())\n\n\n    def parse_models(self, models: List[Dict]) -> List[str]:\n        result = []\n        providers = {\n            'deepseek', 'openrouter', 'google', 'bigcode', 'mistral', 'meta',\n            'moonshotai', 'anthropic', 'openai', 'nous', 'perplexity','qwen'\n        }\n\n\n        for m in models:\n            model_id = m.get('id', '')\n            context = m.get('context_length')\n\n\n            # prompt/completion lehet k√∂zvetlen√ºl vagy limits alatt\n            limits = m.get('limits', {})\n            prompt = m.get('prompt', limits.get('prompt'))\n            completion = m.get('completion', limits.get('completion'))\n\n\n            is_free = \":free\" in model_id\n\n\n            # csak free modellek, ha kell\n            if self.free_only and not is_free:\n                continue\n\n\n            # provider sz≈±r√©s\n            if not any(p in model_id for p in providers):\n                continue\n\n\n            # python specifikus modellek\n            if self.language == \"python\" and not any(x in model_id for x in [\"bigcode/starcoder2-7b:free\", \"meta/codellama-7b-instruct:free\", \"gemini-2.0-flash\"]):\n                continue\n\n\n            # ha van norm√°lis context_length, vagy prompt=0 √©s completion=0\n            if isinstance(context, int) :\n                tokens = context // 1024\n            elif prompt == 0 and completion == 0:\n                tokens = 0\n            else:\n                continue\n\n\n            label = f\"{model_id} | {tokens}K {'üÜì' if is_free else 'üí≤'}\"\n            result.append(label)\n\n\n        return sorted(result)\n\n\n\nclass AIWorker(QThread):\n    \"\"\"AI munkamenet kezel√©se\"\"\"\n    update_received = pyqtSignal(str)\n    response_completed = pyqtSignal(str)\n    error_occurred = pyqtSignal(str, int)\n    truncated = pyqtSignal()\n\n\n    def __init__(self, api_key: str, messages: List[Dict], model: str,\n                 temperature: float, max_tokens: int):\n        super().__init__()\n        self.api_key = api_key\n        self.messages = messages\n        self.model = model.split('|')[0].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged.connect(self.search_chat)\n        right_layout.addWidget(self.search_bar)\n\n\n        self.tab_widget = QTabWidget()\n        self.tab_widget.setTabsClosable(True)\n        self.tab_widget.tabCloseRequested.connect(self.close_tab)\n\n\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setFont(QFont(\"Segoe UI\", 10))\n        self.tab_widget.addTab(self.chat_display, \"Chat\")\n\n\n        self.copy_btn = QPushButton(\"K√≥d m√°sol√°sa\")\n        self.copy_btn.clicked.connect(self.copy_code)\n        self.copy_btn.setEnabled(False)\n\n\n        right_layout.addWidget(self.tab_widget, 1)\n        btn_layout_right = QHBoxLayout()\n        btn_layout_right.addWidget(self\")[-1].strip()\n        self.history.append({\"role\": \"assistant\", \"content\": assistant_text})\n        self.set_ui_state(True)\n        self.status_bar.showMessage(status)\n        self.update_history_menu()\n        self.settings.set('last_model', self.model_combo.currentText())\n        self.autosave_history()\n        self.is_generating = False\n        self.set_generating_background(False)\n        self.input_edit.clear()\n        self.set_scroll_indicator_color(QColor(\"#2ecc71\"))\n\n\n    def show_error(self, msg: str, code: int = None):\n        \"\"\"Hiba megjelen√≠t√©se\"\"\"\n        e = f\"Hiba: {msg}\"\n        if code:\n            e += f\" (St√°tusz: {code})\"\n        QMessageBox.critical(self, \"Hiba\", e)\n        self.status_bar.showMessage(e)\n        self.set_ui_state(True)\n        self.is_generating = False\n        self.set_generating_background(False)\n\n\n    def show_truncated_message(self):\n        \"\"\"V√°lasz folytat√°sa\"\"\"\n        dlg = QDialog(self)\n        dlg.setWindowTitle(\"Folytat√°s...\")\n        dlg.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)\n        dlg.setAttribute(Qt.WA_DeleteOnClose)\n        v = QVBoxLayout()\n        lbl = QLabel(\"A v√°lasz folytat√≥dik‚Ä¶\")\n        lbl.setAlignment(Qt.AlignCenter)\n        lbl.setStyleSheet(\"font-size:16px; padding:20px;\")\n        v.addWidget(lbl)\n        dlg.setLayout(v)\n        dlg.setFixedSize(300, 100)\n        QTimer.singleShot(3000, dlg.close)\n        QTimer.singleShot(3000, self.continue_request)\n        dlg.exec_()\n\n\n    def clear_chat_display(self):\n        \"\"\"Chat t√∂rl√©se\"\"\"\n        self.chat_display.clear()\n        self.code_blocks = []\n        while self.tab_widget.count() > 1:\n            self.tab_widget.removeTab(1)\n        self.code_tab_count = 0\n\n\n    def save_chat(self):\n        \"\"\"Chat ment√©se\"\"\"\n        fn, _ = QFileDialog.getSaveFileName(self, \"Chat ment√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'w', encoding='utf-8') as f:\n                    json.dump(self.history, f, ensure_ascii=False, indent=2)\n                self.status_bar.showMessage(f\"Chat mentve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Ment√©si hiba\", str(e))\n\n\n    def load_chat(self):\n        \"\"\"Chat bet√∂lt√©se\"\"\"\n        fn, _ = QFileDialog.getOpenFileName(self, \"Chat bet√∂lt√©se\",\n                                            \"\", \"JSON f√°jl (*.json);;Minden f√°jl (*)\",\n                                            options=QFileDialog.Options())\n        if fn:\n            try:\n                with open(fn, 'r', encoding='utf-8') as f:\n                    self.history = json.load(f)\n                self.clear_chat_display()\n                for m in self.history:\n                    role = m.get('role', 'user')\n                    content = m.get('content', '')\n                    self.append_to_chat(f\"**{role.capitalize()}:** {content}\\n\\n\", role=role)\n                self.process_code_blocks()\n                self.status_bar.showMessage(f\"Chat bet√∂ltve: {fn}\")\n            except Exception as e:\n                QMessageBox.critical(self, \"Bet√∂lt√©si hiba\", str(e))\n\n\n    def process_code_blocks(self):\n        \"\"\"K√≥dblokkok feldolgoz√°sa\"\"\"\n        text = self.chat_display.toPlainText()\n        for m in re.finditer(r\"^(```([a-zA-Z]{3,})\\n(.*?)\\n```)$\",\n                             text, re.MULTILINE | re.DOTALL):\n            lang = m.group(2).strip() or \"plaintext\"\n            code = m.group(3).strip()\n            self.add_code_tab(lang, code)\n\n\n    def add_code_tab(self, lang, code):\n        \"\"\"√öj k√≥df√ºl l√©trehoz√°sa\"\"\"\n        for i in range(1, self.tab_widget.count()):\n            w = self.tab_widget.widget(i)\n            if isinstance(w, CodeEditor) and w.text() == code:\n                return\n        editor = CodeEditor()\n        editor.set_language(lang)\n        editor.setText(code)\n        self.code_tab_count += 1\n        self.tab_widget.addTab(editor, f\"K√≥d {self.code_tab_count} ({lang})\")\n\n\n    def copy_code(self):\n        \"\"\"K√≥d m√°sol√°sa\"\"\"\n        idx = self.tab_widget.currentIndex()\n        if idx <= 0:\n            return\n        w = self.tab_widget.widget(idx)\n        if isinstance(w, CodeEditor):\n            QApplication.clipboard().setText(w.text())\n            self.status_bar.showMessage(\"K√≥d m√°solva a v√°g√≥lapra!\")\n\n\n    def close_tab(self, idx):\n        \"\"\"F√ºl bez√°r√°sa\"\"\"\n        w = self.tab_widget.widget(idx)\n        if w:\n            w.deleteLater()\n        self.tab_widget.removeTab(idx)\n        self.update_copy_button_state(self.tab_widget.currentIndex())\n\n\n    def search_chat(self, txt):\n        \"\"\"Chat keres√©se\"\"\"\n        if not txt:\n            self.reset_chat_formatting()\n            return\n        self.reset_chat_formatting()\n        cursor = self.chat_display.textCursor()\n        orig = cursor.position()\n        fmt = QTextCharFormat()\n        fmt.setBackground(QColor(\"yellow\"))\n        self.chat_display.moveCursor(QTextCursor.Start)\n        while self.chat_display.find(txt):\n            self.chat_display.textCursor().mergeCharFormat(fmt)\n        self.chat_display.setTextCursor(cursor)\n        cursor.setPosition(orig)\n\n\n    def reset_chat_formatting(self):\n        \"\"\"Chat form√°z√°s vissza√°ll√≠t√°sa\"\"\"\n        cursor = self.chat_display.textCursor()\n        cursor.select(QTextCursor.Document)\n        fmt = QTextCharFormat()\n        fmt.setBackground(Qt.transparent)\n        cursor.mergeCharFormat(fmt)\n        cursor.clearSelection()\n        self.chat_display.setTextCursor(cursor)\n\n\n    def set_generating_background(self, is_gen):\n        \"\"\"√Ållapotf√ºgg≈ë h√°tt√©r be√°ll√≠t√°sa\"\"\"\n        bg = \"#232f34\" if is_gen else \"#34495e\"\n        self.chat_display.setStyleSheet(f\"background-color:{bg};\")\n\n\n    def set_scroll_indicator_color(self, color):\n        \"\"\"G√∂rget≈ëszalag sz√≠n√©nek be√°ll√≠t√°sa\"\"\"\n        style = f\"\"\"\n            QScrollBar:vertical {{\n                background-color:#ecf0f1;\n                width:10px;\n            }}\n            QScrollBar::handle:vertical {{\n                background-color:{color.name()};\n                min-height:20px;\n                border-radius:5px;\n            }}\n        \"\"\"\n        self.chat_display.setStyleSheet(style)\n\n\n    def get_icon_path(self, name):\n        \"\"\"Ikon el√©r√©si √∫tja\"\"\"\n        for p in [os.path.join(os.path.dirname(__file__), name),\n                  os.path.join(self.settings.config_dir, name),\n                  getattr(sys, \"_MEIPASS\", \"\")]:\n            if os.path.exists(p):\n                return p\n        return None\n\n\n    def get_icon(self, name):\n        \"\"\"Ikon bet√∂lt√©se\"\"\"\n        path = self.get_icon_path(name)\n        return QIcon(path) if path else QIcon()\n\n\n    def get_application_icon(self):\n        \"\"\"Alkalmaz√°s ikonj√°nak bet√∂lt√©se\"\"\"\n        return self.get_icon(\"icon.ico\") or self.get_icon(\"icon.png\") or QIcon()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = MainWindow()\n    w.show()\n    sys.exit(app.exec_())  legyen egy nyelv v√°laszt√≥ amiben minden √©s python v√°laszt√°s van, ha a pythonra kattintok csak a bigcode/starcoder2-7b:free\nmeta/codellama-7b-instruct:free gemini-2.0 flasht lehessen kiv√°lasztani free be. k√©rem a teljes k√≥dot!\n\nA k√©rt funkci√≥ megval√≥s√≠t√°s√°hoz egy nyelv v√°laszt√≥ combo boxot kell hozz√°adni a fel√ºlethez. A k√∂vetkez≈ë k√≥d ezt val].strip()\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.running = True\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n\n    def run(self):\n        payload = {\n            \"model\": self.model,\n            \"messages\": self.messages,\n            \"temperature\": self.temperature,\n            \"max_tokens\": self.max_tokens,\n            \"reasoning\": {\"exclude\": True},\n            \"transforms\": [\"middle-out\"],\n            \"usage\": {\"include\": True},\n            \"stream\": True\n        }\n\n\n        try:\n            resp = self.session.post(API_URL, json=payload, stream=True, timeout=60)\n            if resp.status_code != 200:\n                try:\n                    resp.raise_for_status()\n                except requests.exceptions.HTTPError as e:\n                    try:\n                        err = resp.json().get('error', {}).get('message', 'Unknown error')\n                    except Exception:\n                        err = resp.text[:200] + \"...\" if len(resp.text) > 200 else resp.text\n                    self.error_occurred.emit(str(e), resp.status_code)\n                return\n\n\n            buffer = bytearray()\n            for chunk in resp.iter_lines():\n                if not self.running:\n                    return\n                if chunk:\n                    try:\n                        data = chunk\n                        if data.startswith(b'data:'):\n                            data = data[5:].strip()\n                        if not data:\n                            continue\n                        if not data.startswith(b'{'):\n                            continue\n                        parsed = json.loads(data.decode('utf-8'))\n                        choices = parsed.get('choices', [{}])\n                        if choices:\n                            delta = choices[0].get('delta', {})\n                            content = delta.get('content', '')\n                            if content:\n                                buffer.extend(content.encode('utf-8'))\n                                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n                                buffer.clear()\n                            finish_reason = choices[0].get('finish_reason')\n                            if finish_reason == 'length':\n                                self.truncated.emit()\n                    except Exception:\n                        pass\n\n\n            if buffer:\n                self.update_received.emit(buffer.decode('utf-8', errors='replace'))\n\n\n            self.response_completed.emit(\"K√©sz!\")\n        except requests.RequestException as e:\n            self.error_occurred.emit(f\"Network error: {e}\", 500)\n        except Exception as e:\n            self.error_occurred.emit(f\"Unexpected error: {e}\", 500)\n\n\n    def stop(self):\n        self.running = False\n        self.session.close()\n\n\nclass CodeEditor(QWidget):\n    \"\"\"K√≥dszerkeszt≈ë widget\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.layout = QVBoxLayout(self)\n        self.layout.setContentsMargins(0, 0, 0, 0)\n\n\n        if HAS_SCINTILLA:\n            self.editor = QsciScintilla()\n            self.editor.setAutoIndent(True)\n            self.editor.setIndentationGuides(True)\n            self.editor.setMarginLineNumbers(1, True)\n            self.editor.setMarginWidth(1, \"0000\")\n            self.editor.setBraceMatching(QsciScintilla.SloppyBraceMatch)\n            self.editor.setCaretLineVisible(True)\n            self.editor.setCaretLineBackgroundColor(QColor(30, 30, 40))\n        else:\n            self.editor = QPlainTextEdit()\n            self.editor.setReadOnly(True)\n\n\n        self.layout.addWidget(self.editor)\n\n\n    def set_language(self, language):\n        if not HAS_SCINTILLA:\n            return\n        lexer_map = {\n            \"python\": QsciLexerPython,\n            \"cpp\": QsciLexerCPP,\n            \"c++\": QsciLexerCPP,\n            \"java\": QsciLexerJava,\n            \"javascript\": QsciLexerJavaScript,\n            \"js\": QsciLexerJavaScript,\n            \"typescript\": QsciLexerJavaScript,   \n            \"ts\": QsciLexerJavaScript,\n            \"php\": QsciLexerHTML,   \n            \"html\": QsciLexerHTML,\n            \"xml\": QsciLexerXML,\n            \"json\": QsciLexerJSON,\n            \"sql\": QsciLexerSQL,\n            \"bash\": QsciLexerBash,\n            \"sh\": QsciLexerBash\n            }\n        lexer = lexer_map.get(language.lower())\n        if lexer:\n            self.editor.setLexer(lexer())\n\n\n    def setText(self, text):\n        if HAS_SCINTILLA:\n            self.editor.setText(text)\n        else:\n            self.editor.setPlainText(text)\n\n\n    def text(self):\n        return self.editor.text() if HAS_SCINTILLA else self.editor.toPlainText()\n\n\nclass SearchDialog(QDialog):\n    \"\"\"Keres√©s dial√≥gusablak\"\"\"\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setWindowTitle(\"Keres√©s\")\n        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)\n\n\n        self.layout = QVBoxLayout(self)\n        self.form = QFormLayout()\n\n\n        self.search_edit = QLineEdit()\n        self.search_edit.textChanged.connect(self.on_search_text_changed)\n        self.form.addRow(\"Keres√©s:\", self.search_edit)\n\n\n        self.layout.addLayout(self.form)\n\n\n        self.buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        self.buttons.accepted.connect(self.find_next)\n        self.buttons.rejected.connect(self.reject)\n        self.layout.addWidget(self.buttons)\n\n\n        self.find_next_btn = QPushButton(\"K√∂vetkez≈ë\")\n        self.find_prev_btn = QPushButton(\"El≈ëz≈ë\")\n        self.buttons.addButton(self.find_next_btn, QDialogButtonBox.ActionRole)\n        self.buttons.addButton(self.find_prev_btn, QDialogButtonBox.ActionRole)\n        self.find_next_btn.clicked.connect(self.find_next)\n        self.find_prev_btn.clicked.connect(self.find_prev)\n\n\n        self.editor = parent.chat_display\n        self.cursor = self.editor.textCursor()\n\n\n    def on_search_text_changed(self, text):\n        self.cursor = self.editor.textCursor()\n        self.cursor.setPosition(0)\n\n\n    def find_next(self):\n        self._find(QTextDocument.FindFlags())\n\n\n    def find_prev(self):\n        self._find(QTextDocument.FindBackward)\n\n\n    def _find(self, flags):\n        text = self.search_edit.text()\n        if not text:\n            return\n        cursor = self.editor.document().find(text, self.cursor, flags)\n        if not cursor.isNull():\n            self.editor.setTextCursor(cursor)\n            self.cursor = cursor\n        else:\n            QMessageBox.information(self, \"Keres√©s\", \"Nincs t√∂bb tal√°lat.\")\n            self.cursor.setPosition(0 if flags & QTextDocument.FindBackward else QTextCursor.End)\n            self._find(flags)\n\n\nclass TextReceiver(QObject):\n    \"\"\"Sz√∂vegkezel≈ë oszt√°ly\"\"\"\n    update_text = pyqtSignal(str)\n\n\nclass MainWindow(QWidget):\n    \"\"\"F≈ëablak oszt√°ly\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.settings = SettingsManager()\n        self.encryption_manager = EncryptionManager()\n        self.network_manager = NetworkManager()\n        self.worker = None\n\n\n        self.history = []\n        self.current_prompt = \"\"\n        self.code_blocks = []\n        self.buffered_text = \"\"\n        self.update_interval = 80\n        self.text_receiver = TextReceiver()\n        self.text_receiver.update_text.connect(self.append_to_chat)\n        self.is_generating = False\n        self.code_tab_count = 0\n\n\n        self.setup_ui()\n        self.setup_connections()\n        self.load_settings()\n        self.setWindowIcon(self.get_application_icon())\n        self.update_timer = QTimer(self)\n        self.update_timer.timeout.connect(self.flush_buffer)\n\n\n        gc.collect()\n\n\n    def setup_ui(self):\n        \"\"\"Fel√ºlet l√©trehoz√°sa\"\"\"\n        self.setWindowTitle(\"Szita AI K√≥dasszisztens\")\n        self.setMinimumSize(1000, 700)\n\n\n        main_layout = QVBoxLayout()\n        toolbar = self.create_toolbar()\n        main_layout.addWidget(toolbar)\n\n\n        splitter = QSplitter(Qt.Horizontal)\n\n\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        left_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        api_group = QGroupBox(\"API Be√°ll√≠t√°sok\")\n        api_layout = QVBoxLayout(api_group)\n\n\n        key_layout = QHBoxLayout()\n        self.key_combo = QComboBox()\n        self.key_combo.setEditable(True)\n        key_layout.addWidget(QLabel(\"Kulcs:\"))\n        key_layout.addWidget(self.key_combo)\n        api_layout.addLayout(key_layout)\n\n\n        model_layout = QHBoxLayout()\n        self.free_check = QCheckBox(\"Csak Ingyenes\")\n        self.free_check.setChecked(True)\n        model_layout.addWidget(self.free_check)\n        \n        self.language_combo = QComboBox()\n        self.language_combo.addItems([\"√ñsszes\", \"Python\"])\n        model_layout.addWidget(self.language_combo)\n        \n        model_layout.addWidget(QLabel(\"Modell:\"))\n        self.model_combo = QComboBox()\n        model_layout.addWidget(self.model_combo)\n        model_layout.setStretch(3, 1)\n        api_layout.addLayout(model_layout)\n\n\n        param_layout = QHBoxLayout()\n        param_layout.addWidget(QLabel(\"H≈ëm√©rs√©klet:\"))\n        self.temp_spin = QDoubleSpinBox()\n        self.temp_spin.setRange(0.0, 2.0)\n        self.temp_spin.setSingleStep(0.1)\n        self.temp_spin.setValue(DEFAULT_TEMP)\n        param_layout.addWidget(self.temp_spin)\n\n\n        param_layout.addWidget(QLabel(\"Max tokenek:\"))\n        self.token_combo = QComboBox()\n        for t in TOKEN_OPTIONS:\n            self.token_combo.addItem(f\"{t // 1024}K\", t)\n        self.token_combo.setCurrentIndex(DEFAULT_TOKENS_INDEX)\n        param_layout.addWidget(self.token_combo)\n\n\n        api_layout.addLayout(param_layout)\n        left_layout.addWidget(api_group)\n\n\n        input_group = QGroupBox(\"K√©r√©s\")\n        input_layout = QVBoxLayout(input_group)\n        self.input_edit = QTextEdit()\n        self.input_edit.setPlaceholderText(\"√çrd ide a k√©rd√©sed...\")\n        input_layout.addWidget(self.input_edit)\n\n\n        btn_layout = QHBoxLayout()\n        self.upload_btn = QPushButton(\"F√°jl felt√∂lt√©s\")\n        self.send_btn = QPushButton(\"K√ºld√©s\")\n        self.cont_btn = QPushButton(\"Folytat√°s\")\n        btn_layout.addWidget(self.upload_btn)\n        btn_layout.addWidget(self.send_btn)\n        btn_layout.addWidget(self.cont_btn)\n        input_layout.addLayout(btn_layout)\n        left_layout.addWidget(input_group, 1)\n\n\n        splitter.addWidget(left_panel)\n\n\n        self.right_panel = QWidget()\n        right_layout = QVBoxLayout(self.right_panel)\n        right_layout.setContentsMargins(5, 5, 5, 5)\n\n\n        self.search_bar = QLineEdit()\n        self.search_bar.setPlaceholderText(\"Keres√©s a chatben...\")\n        self.search_bar.textChanged\n\nK√©rlek komment n√©lk√ºl folytasd a k√≥dot!"
  }
]